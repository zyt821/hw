# Asynchronous Background Processing Setup Guide

## Overview
This implementation converts your compliance checking tool to run asynchronously in the background with real-time progress tracking and job cancellation support.

## Key Features
- ✅ Background processing using PHP exec/shell_exec
- ✅ Real-time progress updates via AJAX
- ✅ Job cancellation support
- ✅ Database-based job control
- ✅ Works with PHP-FPM (non-CLI)
- ✅ No third-party libraries required

## Files Structure

```
your-project/
├── index.html                    # Upload form (unchanged)
├── test11.php                    # Main file (async version)
├── background_processor.php      # Background worker script
├── ExcelComparisonTool.php      # Updated comparison tool
├── logs/                         # Auto-created for job logs
└── exports/                      # Auto-created for exports
```

## Installation Steps

### 1. Create Database Tables

Run this SQL to create the required tables:

```sql
-- Background jobs tracking table
CREATE TABLE IF NOT EXISTS background_jobs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    job_id VARCHAR(50) UNIQUE NOT NULL,
    status ENUM('pending', 'running', 'completed', 'cancelled', 'failed') DEFAULT 'pending',
    progress INT DEFAULT 0,
    total_records INT DEFAULT 0,
    session_id VARCHAR(50),
    error_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_job_id (job_id),
    INDEX idx_status (status),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Job cancellation flags table
CREATE TABLE IF NOT EXISTS job_cancel_flags (
    job_id VARCHAR(50) PRIMARY KEY,
    cancel_requested BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_cancel_requested (cancel_requested)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
```

### 2. Set File Permissions

Ensure your web server can execute PHP scripts and write to directories:

```bash
# Linux/Unix
chmod +x background_processor.php
chmod 755 logs/
chmod 755 exports/

# Or create directories if they don't exist
mkdir -p logs exports
chmod 755 logs exports
```

### 3. Configure PHP Settings

Check your `php.ini` or create a `.htaccess` file:

```ini
max_execution_time = 300
memory_limit = 512M
upload_max_filesize = 50M
post_max_size = 50M
```

### 4. Verify PHP Binary Path

The script uses `PHP_BINARY` constant. Verify it works:

```php
<?php
echo PHP_BINARY;
// Should output something like: /usr/bin/php
?>
```

If it doesn't work, manually set the path in `test11.php`:

```php
// Replace this line in startBackgroundProcessing()
$phpPath = '/usr/bin/php'; // Your actual PHP path
```

## How It Works

### Workflow

1. **User uploads files** → `test11.php` receives files
2. **Files stored in database** → Data saved to `dce_data`, `argos_data`, `sn_data` tables
3. **Background job created** → Entry in `background_jobs` table with unique `job_id`
4. **Background process spawned** → `background_processor.php` runs via exec()
5. **Real-time progress** → AJAX polls job status every 2 seconds
6. **Job completion** → Results stored and user redirected to results page

### Job States

- **pending**: Job created but not started yet
- **running**: Job is currently processing
- **completed**: Job finished successfully
- **cancelled**: User cancelled the job
- **failed**: Job encountered an error

### Cancellation Mechanism

When a user clicks "Cancel Job":
1. Flag set in `job_cancel_flags` table
2. Background processor checks flag between batches
3. If flag is true, processor stops and updates status to 'cancelled'
4. All intermediate data is preserved

## Usage

### Normal Operation

1. Upload files via `index.html`
2. Monitor progress on job status page
3. View results when complete

### Cancelling a Job

1. Click "Cancel Job" button on progress page
2. Confirm cancellation
3. Background process will stop at next checkpoint
4. You'll be redirected to upload page

### Checking Old Jobs

Jobs and their results are kept for 24 hours by default. To change retention:

```php
// In test11.php, modify these calls:
cleanupOldResults(48);    // Keep for 48 hours
cleanupOldCsvData(48);    // Keep for 48 hours
```

## Troubleshooting

### Background Process Not Starting

**Problem**: Job stays in "pending" status

**Solutions**:
1. Check PHP binary path is correct
2. Verify file permissions on `background_processor.php`
3. Check server error logs
4. Test command manually:
   ```bash
   php background_processor.php "test_job_id" "test_session_id"
   ```

### Progress Not Updating

**Problem**: Progress bar stuck at 0%

**Solutions**:
1. Check browser console for JavaScript errors
2. Verify AJAX endpoint is accessible: `test11.php?ajax=job_status&job_id=YOUR_JOB_ID`
3. Check if `background_processor.php` is actually running:
   ```bash
   ps aux | grep background_processor
   ```

### Cancellation Not Working

**Problem**: Cancel button doesn't stop the job

**Solutions**:
1. Verify `job_cancel_flags` table exists
2. Check database permissions for UPDATE operations
3. Ensure background process is checking cancellation flag (should check every batch)

### Memory Issues

**Problem**: Process fails with memory errors

**Solutions**:
1. Increase PHP memory limit in php.ini
2. Reduce batch size in `compareDataWithCancellation()`:
   ```php
   // In ExcelComparisonTool.php
   $results = $comparator->compareDataWithCancellation($jobId, $progressCallback, 500); // Reduced from 1000
   ```

### Permission Denied Errors

**Problem**: Cannot write to logs or execute scripts

**Solutions**:
```bash
# Linux/Unix
chown -R www-data:www-data /path/to/your/project
chmod -R 755 /path/to/your/project
chmod +x background_processor.php
```

## Performance Tuning

### Large Datasets

For datasets with 10,000+ records:

1. **Adjust batch size**:
   ```php
   // In background_processor.php
   $results = $comparator->compareDataWithCancellation($jobId, function($progress) use ($jobId) {
       updateJobStatus($jobId, 'running', 50 + ($progress * 0.4));
   }, 500); // Smaller batches = more frequent cancellation checks
   ```

2. **Increase PHP limits**:
   ```ini
   max_execution_time = 600
   memory_limit = 1024M
   ```

3. **Enable garbage collection**:
   The code already includes `gc_collect_cycles()` after each batch

## Security Considerations

1. **Input Validation**: Always validate file uploads
2. **SQL Injection**: Code uses prepared statements (✓)
3. **File Access**: Restrict access to sensitive directories
4. **Job ID Security**: Job IDs use `uniqid()` with entropy (✓)

## Monitoring

### View Active Jobs

```sql
SELECT job_id, status, progress, created_at, updated_at 
FROM background_jobs 
WHERE status IN ('pending', 'running')
ORDER BY created_at DESC;
```

### View Failed Jobs

```sql
SELECT job_id, error_message, created_at 
FROM background_jobs 
WHERE status = 'failed'
ORDER BY created_at DESC
LIMIT 10;
```

### Clean Up Old Jobs

```sql
-- Manual cleanup (older than 7 days)
DELETE FROM background_jobs WHERE created_at < DATE_SUB(NOW(), INTERVAL 7 DAY);
DELETE FROM job_cancel_flags WHERE created_at < DATE_SUB(NOW(), INTERVAL 7 DAY);
DELETE FROM temp_comparison_results WHERE created_at < DATE_SUB(NOW(), INTERVAL 7 DAY);
```

## Advanced Configuration

### Custom Progress Updates

Modify progress callback in `background_processor.php`:

```php
$results = $comparator->compareDataWithCancellation($jobId, function($progress) use ($jobId) {
    // Custom progress calculation
    $totalProgress = 50 + ($progress * 0.4); // 50-90% range
    updateJobStatus($jobId, 'running', $totalProgress);
    
    // Optional: Log progress
    error_log("Job $jobId progress: $totalProgress%");
}, 1000);
```

### Email Notifications

Add to `background_processor.php` after completion:

```php
if ($jobStatus['status'] === 'completed') {
    mail('admin@example.com', 'Job Completed', "Job $jobId completed successfully");
}
```

## FAQ

**Q: Can multiple jobs run simultaneously?**
A: Yes, each job runs as a separate process.

**Q: What happens if the server restarts?**
A: Running jobs will be marked as "running" but won't continue. You'll need to manually clean them up or implement a recovery mechanism.

**Q: How do I increase polling frequency?**
A: In `test11.php`, change `setTimeout(updateProgress, 2000)` to a lower value (in milliseconds).

**Q: Can I see the background process output?**
A: Yes, check the log files in the `logs/` directory: `job_[JOB_ID].log`

## Support

If you encounter issues:
1. Check PHP error logs
2. Check web server error logs (Apache/Nginx)
3. Check job-specific logs in `logs/` directory
4. Enable PHP error display for debugging (development only)
