# 异步处理 + 中断功能 - 完整实现指南

## 目录结构
```
your_project/
├── test11.php                   # 你的主脚本（需要修改）
├── async_processor.php          # 新增：异步处理脚本
├── cancel_task.php              # 新增：取消任务
├── get_task_progress.php        # 新增：获取进度
├── get_final_session.php        # 新增：获取最终会话ID
├── cleanup_temp_files.php       # 新增：清理临时文件
├── index.html                   # 修改后的上传页面
├── temp_uploads/                # 新增：临时文件目录
└── exports/                     # 现有的导出目录
```

## 实施步骤

### 1. 创建新文件

#### A. 创建 `async_processor.php`
- 复制第一个artifact的内容
- 注意修改开头的 `require_once` 路径指向你的数据库函数文件

#### B. 创建支持文件
将第三个artifact拆分成以下单独文件：

**cancel_task.php**
```php
<?php
if ($_POST['task_id']) {
    $task_id = $_POST['task_id'];
    $cancel_file = "cancel_" . $task_id . ".flag";
    file_put_contents($cancel_file, time());
    echo "取消请求已发送";
}
?>
```

**get_task_progress.php**
```php
<?php
header('Content-Type: application/json');

$task_id = $_GET['task_id'] ?? '';
if (empty($task_id)) {
    echo json_encode(['status' => 'error', 'message' => '缺少任务ID']);
    exit;
}

$status_file = "task_status_" . $task_id . ".json";

if (file_exists($status_file)) {
    $data = json_decode(file_get_contents($status_file), true);
    echo json_encode($data);
} else {
    echo json_encode([
        'status' => 'not_found', 
        'progress' => 0, 
        'message' => '任务未找到'
    ]);
}
?>
```

**get_final_session.php**
```php
<?php
$task_id = $_GET['task_id'] ?? '';
if (empty($task_id)) {
    echo "错误：缺少任务ID";
    exit;
}

$final_session_file = "final_session_" . $task_id . ".txt";

if (file_exists($final_session_file)) {
    $session_id = file_get_contents($final_session_file);
    echo trim($session_id);
    unlink($final_session_file);
} else {
    echo "错误：找不到会话ID";
}
?>
```

### 2. 修改现有文件

#### A. 修改 `test11.php`
在你现有的 `test11.php` 中添加以下代码：

1. **在文件开头添加新函数**（第二个artifact中的函数）
2. **替换现有的执行逻辑**（第二个artifact中的try-catch块）
3. **添加 `ExcelComparisonToolWithCancel` 类**

#### B. 更新 `index.html`
- 用第四个artifact的内容替换现有上传页面

### 3. 创建必要目录
```bash
mkdir temp_uploads
chmod 755 temp_uploads
```

### 4. 权限设置
确保以下文件有写入权限：
```bash
chmod 755 async_processor.php
chmod 755 cancel_task.php
chmod 755 get_task_progress.php
chmod 755 get_final_session.php
chmod 777 temp_uploads/
```

## 工作流程

### 用户上传文件
1. 用户在 `index.html` 选择三个CSV文件
2. 点击"开始处理"，文件被上传到 `test11.php`
3. `test11.php` 调用 `handleFileUploadAsync()` 函数
4. 文件被移动到 `temp_uploads/` 目录
5. 生成唯一的 `task_id`
6. 后台启动 `async_processor.php`
7. 用户被重定向到处理页面

### 异步处理
1. `async_processor.php` 开始处理文件
2. 每个阶段都会：
   - 更新进度状态到JSON文件
   - 检查取消标志文件
   - 如果发现取消标志，立即停止并清理
3. 处理完成后保存最终会话ID

### 用户界面
1. 处理页面每秒检查进度
2. 显示实时进度条和状态消息
3. 用户可随时点击"取消"按钮
4. 处理完成后自动跳转到结果页面

## 关键特性

### ✅ 立即响应中断
- 使用文件标志系统
- 每处理一批数据就检查取消状态
- 数据库操作前检查取消状态

### ✅ 内存优化
- 分批处理大文件
- 及时释放内存
- 垃圾回收机制

### ✅ 错误处理
- 完整的异常捕获
- 优雅的错误恢复
- 自动清理临时文件

### ✅ 用户体验
- 实时进度显示
- 清晰的状态信息
- 简单的取消操作

## 清理机制

### 自动清理
在 `async_processor.php` 完成后会自动清理：
- 上传的临时文件
- 任务状态文件
- 取消标志文件

### 定期清理
设置定时任务调用 `cleanup_temp_files.php`：
```bash
# 添加到crontab，每小时清理一次
0 * * * * /usr/bin/php /path/to/your/project/cleanup_temp_files.php
```

## 故障排除

### 常见问题

**1. 后台脚本无法启动**
- 检查 `shell_exec` 函数是否可用
- 确认 PHP CLI 路径正确
- 验证文件权限

**2. 进度不更新**
- 检查状态文件是否有写入权限
- 确认JSON格式正确
- 查看PHP错误日志

**3. 取消功能不工作**
- 确认取消文件能够创建
- 检查异步脚本是否在检查取消状态
- 验证文件路径正确

**4. 内存不足**
- 减少批次大小（默认500条）
- 增加PHP内存限制
- 检查垃圾回收是否正常

## 测试建议

### 功能测试
1. 上传小文件测试基本功能
2. 上传大文件测试异步处理
3. 处理过程中测试取消功能
4. 测试错误处理机制

### 压力测试
1. 同时启动多个处理任务
2. 测试大文件（>10MB）处理
3. 网络中断恢复测试
4. 长时间运行稳定性测试

这个解决方案在FPM-FCGI环境下可以有效实现用户中断功能，通过异步处理避免了超时问题，并提供了良好的用户体验。
