<?php
session_start();

require_once "ExcelComparisonTool.php";

define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASS', '');
define('DB_NAME', 'compliance_db');

function connectToDatabase() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASS);
    if ($conn->connect_error) {
        throw new Exception("Database connection failed: " . $conn->connect_error);
    }
    $conn->select_db(DB_NAME);
    return $conn;
}

// Create background job in database
function createBackgroundJob($sessionId) {
    try {
        $conn = connectToDatabase();
        $jobId = uniqid('job_', true);
        
        $stmt = $conn->prepare("INSERT INTO background_jobs (job_id, status, session_id) VALUES (?, 'pending', ?)");
        $stmt->bind_param("ss", $jobId, $sessionId);
        $stmt->execute();
        $stmt->close();
        
        // Create cancel flag entry
        $stmt = $conn->prepare("INSERT INTO job_cancel_flags (job_id, cancel_requested) VALUES (?, FALSE)");
        $stmt->bind_param("s", $jobId);
        $stmt->execute();
        $stmt->close();
        
        $conn->close();
        return $jobId;
    } catch (Exception $e) {
        error_log("Failed to create job: " . $e->getMessage());
        return false;
    }
}

// Start background processing
function startBackgroundProcessing($jobId, $sessionId) {
    $phpPath = PHP_BINARY;
    $scriptPath = __DIR__ . '/background_processor.php';
    $logPath = __DIR__ . '/logs/job_' . $jobId . '.log';
    
    // Create logs directory if it doesn't exist
    if (!is_dir(__DIR__ . '/logs')) {
        mkdir(__DIR__ . '/logs', 0777, true);
    }
    
    // Build command for background execution
    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
        // Windows
        $command = sprintf(
            'start /B "" "%s" "%s" %s %s > "%s" 2>&1',
            $phpPath,
            $scriptPath,
            escapeshellarg($jobId),
            escapeshellarg($sessionId),
            $logPath
        );
    } else {
        // Linux/Unix
        $command = sprintf(
            '"%s" "%s" %s %s > "%s" 2>&1 &',
            $phpPath,
            $scriptPath,
            escapeshellarg($jobId),
            escapeshellarg($sessionId),
            $logPath
        );
    }
    
    exec($command);
    return true;
}

// Get job status
function getJobStatus($jobId) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("SELECT status, progress, error_message, updated_at FROM background_jobs WHERE job_id = ?");
        $stmt->bind_param("s", $jobId);
        $stmt->execute();
        $stmt->bind_result($status, $progress, $errorMessage, $updatedAt);
        
        if ($stmt->fetch()) {
            $result = [
                'status' => $status,
                'progress' => $progress,
                'error_message' => $errorMessage,
                'updated_at' => $updatedAt
            ];
            $stmt->close();
            $conn->close();
            return $result;
        }
        
        $stmt->close();
        $conn->close();
        return null;
    } catch (Exception $e) {
        error_log("Failed to get job status: " . $e->getMessage());
        return null;
    }
}

// Cancel a job
function cancelJob($jobId) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("UPDATE job_cancel_flags SET cancel_requested = TRUE WHERE job_id = ?");
        $stmt->bind_param("s", $jobId);
        $stmt->execute();
        $stmt->close();
        $conn->close();
        return true;
    } catch (Exception $e) {
        error_log("Failed to cancel job: " . $e->getMessage());
        return false;
    }
}

function storeCsvDataToDatabase($csvData, $tableName, $sessionId, $fieldMapping) {
    try {
        $conn = connectToDatabase();

        switch ($tableName) {
            case 'dce_data':
                $sql = "INSERT INTO dce_data (session_id, hostname, useruid, sn_number, livedate, userwhen) VALUES (?, ?, ?, ?, ?, ?)";
                break;
            case 'argos_data':
                $sql = "INSERT INTO argos_data (session_id, hostname, owner, serial_number, state) VALUES (?, ?, ?, ?, ?)";
                break;
            case 'sn_data':
                $sql = "INSERT INTO sn_data (session_id, serial_number, State, pending_collection) VALUES (?, ?, ?, ?)";
                break;
            default:
                throw new Exception("Unknown table name: $tableName");
        }

        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            throw new Exception("Prepare statement failed: " . $conn->error);
        }

        foreach ($csvData as $row) {
            $param1 = $sessionId;
            $param2 = $param3 = $param4 = $param5 = $param6 = '';

            switch ($tableName) {
                case 'dce_data':
                    $param2 = $row[$fieldMapping['hostname']] ?? '';
                    $param3 = $row[$fieldMapping['useruid']] ?? '';
                    $param4 = $row[$fieldMapping['sn_number']] ?? '';
                    $param5 = $row[$fieldMapping['livedate']] ?? '';
                    $param6 = $row[$fieldMapping['userwhen']] ?? '';
                    $stmt->bind_param("ssssss", $param1, $param2, $param3, $param4, $param5, $param6);
                    break;
                case 'argos_data':
                    $param2 = $row[$fieldMapping['hostname']] ?? '';
                    $param3 = $row[$fieldMapping['owner']] ?? '';
                    $param4 = $row[$fieldMapping['serial_number']] ?? '';
                    $param5 = $row[$fieldMapping['state']] ?? '';
                    $stmt->bind_param("sssss", $param1, $param2, $param3, $param4, $param5);
                    break;
                case 'sn_data':
                    $param2 = $row[$fieldMapping['serial_number']] ?? '';
                    $param3 = $row[$fieldMapping['State']] ?? '';
                    $param4 = $row[$fieldMapping['pending_collection']] ?? '';
                    $stmt->bind_param("ssss", $param1, $param2, $param3, $param4);
                    break;
            }

            if (!$stmt->execute()) {
                error_log("Failed to insert row: " . $stmt->error);
            }
        }

        $stmt->close();
        $conn->close();
        return true;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}

function loadCsvDataFromDatabase($tableName, $sessionId) {
    try {
        $conn = connectToDatabase();

        switch ($tableName) {
            case 'dce_data':
                $sql = "SELECT hostname, useruid, sn_number as 'serial', livedate, userwhen FROM dce_data WHERE session_id = ?";
                break;
            case 'argos_data':
                $sql = "SELECT hostname, owner, serial_number as 'serial#', state FROM argos_data WHERE session_id = ?";
                break;
            case 'sn_data':
                $sql = "SELECT serial_number as 'Serial number', State, pending_collection as 'Pending collection [Hardware]' FROM sn_data WHERE session_id = ?";
                break;
            default:
                throw new Exception("Unknown table name: $tableName");
        }

        $stmt = $conn->prepare($sql);
        $stmt->bind_param("s", $sessionId);
        $stmt->execute();
        $result = $stmt->get_result();

        $data = [];
        while ($row = $result->fetch_assoc()) {
            $data[] = $row;
        }

        $stmt->close();
        $conn->close();
        return $data;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return [];
    }
}

function getComparisonResults($sessionId) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("SELECT result_data FROM temp_comparison_results WHERE session_id = ?");
        $stmt->bind_param("s", $sessionId);
        $stmt->execute();
        $stmt->bind_result($resultData);

        if ($stmt->fetch()) {
            $results = json_decode($resultData, true);
            $stmt->close();
            $conn->close();
            return $results;
        }

        $stmt->close();
        $conn->close();
        return null;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return null;
    }
}

function cleanupOldResults($hoursOld = 24) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("DELETE FROM temp_comparison_results WHERE created_at < DATE_SUB(NOW(), INTERVAL ? HOUR)");
        $stmt->bind_param("i", $hoursOld);
        $stmt->execute();
        $stmt->close();
        $conn->close();
    } catch (Exception $e) {
        error_log("Database error during cleanup: " . $e->getMessage());
    }
}

function cleanupOldCsvData($hoursOld = 24) {
    try {
        $conn = connectToDatabase();
        $tables = ['dce_data', 'argos_data', 'sn_data'];
        foreach ($tables as $table) {
            $stmt = $conn->prepare("DELETE FROM $table WHERE created_at < DATE_SUB(NOW(), INTERVAL ? HOUR)");
            $stmt->bind_param("i", $hoursOld);
            $stmt->execute();
            $stmt->close();
        }
        $conn->close();
    } catch (Exception $e) {
        error_log("Database error during CSV data cleanup: " . $e->getMessage());
    }
}

function getComplianceRecords() {
    try {
        $conn = connectToDatabase();
        $result = $conn->query("SELECT * FROM compliance_results ORDER BY created_at DESC LIMIT 100");
        $records = [];
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                $records[] = $row;
            }
        }
        $conn->close();
        return $records;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return [];
    }
}

// Handle AJAX requests for job status
if (isset($_GET['ajax']) && $_GET['ajax'] === 'job_status' && isset($_GET['job_id'])) {
    header('Content-Type: application/json');
    $status = getJobStatus($_GET['job_id']);
    echo json_encode($status);
    exit;
}

// Handle job cancellation
if (isset($_POST['cancel_job']) && isset($_POST['job_id'])) {
    header('Content-Type: application/json');
    $result = cancelJob($_POST['job_id']);
    echo json_encode(['success' => $result]);
    exit;
}

// Handle export logic
try {
    if (isset($_GET['export']) && $_GET['export'] === 'non_compliant' && isset($_GET['session_id'])) {
        $comparisonResults = getComparisonResults($_GET['session_id']);

        if (!$comparisonResults) {
            throw new Exception("No comparison results found. Please upload files first.");
        }

        $comparator = new ExcelComparisonTool();
        $exportedFile = $comparator
            ->setComparisonResults($comparisonResults)
            ->exportNonCompliantResults();

        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment; filename="' . basename($exportedFile) . '"');
        header('Content-Length: ' . filesize($exportedFile));
        readfile($exportedFile);
        exit;
    }
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
    exit;
}

// Main execution
try {
    $comparisonResults = [];
    $nonCompliantResults = [];
    $sessionId = isset($_GET['session_id']) ? $_GET['session_id'] : null;
    $jobId = isset($_GET['job_id']) ? $_GET['job_id'] : null;

    cleanupOldResults(24);
    cleanupOldCsvData(24);

    // Check if we're viewing a job in progress
    if ($jobId) {
        $jobStatus = getJobStatus($jobId);
        if ($jobStatus && $jobStatus['status'] === 'completed') {
            // Job completed, get results and redirect to results page
            $comparisonResults = getComparisonResults($jobId);
            if ($comparisonResults) {
                $nonCompliantResults = array_filter($comparisonResults, function($result) {
                    return $result['compliance_status'] === 'non-compliant';
                });
            }
        }
    } else if ($sessionId) {
        $comparisonResults = getComparisonResults($sessionId);
        if (!$comparisonResults) {
            echo "<div style='color:red;margin:10px 0;'>Session expired or invalid. Please upload files again.</div>";
            $comparisonResults = [];
        } else {
            $nonCompliantResults = array_filter($comparisonResults, function($result) {
                return $result['compliance_status'] === 'non-compliant';
            });
        }
    } else if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['dce_file'])) {
        if (isset($_SESSION['comparison_results'])) {
            unset($_SESSION['comparison_results']);
        }

        // Generate unique session ID
        $sessionId = uniqid('upload_', true);

        // Upload and store CSV files
        $dceFile = $_FILES['dce_file']['tmp_name'];
        $dceData = [];
        if (($handle = fopen($dceFile, "r")) !== FALSE) {
            $headers = fgetcsv($handle);
            while (($row = fgetcsv($handle)) !== FALSE) {
                if (count($row) == count($headers)) {
                    $dceData[] = array_combine($headers, $row);
                }
            }
            fclose($handle);
        }

        $dceFieldMapping = [
            'hostname' => 'hostname',
            'useruid' => 'useruid',
            'sn_number' => 'serial',
            'livedate' => 'livedate',
            'userwhen' => 'userwhen'
        ];
        storeCsvDataToDatabase($dceData, 'dce_data', $sessionId, $dceFieldMapping);

        $argosFile = $_FILES['argos_file']['tmp_name'];
        $argosData = [];
        if (($handle = fopen($argosFile, "r")) !== FALSE) {
            $headers = fgetcsv($handle);
            while (($row = fgetcsv($handle)) !== FALSE) {
                if (count($row) == count($headers)) {
                    $argosData[] = array_combine($headers, $row);
                }
            }
            fclose($handle);
        }

        $argosFieldMapping = [
            'hostname' => 'Hostname',
            'owner' => 'Owner',
            'serial_number' => 'Serial #',
            'state' => 'State'
        ];
        storeCsvDataToDatabase($argosData, 'argos_data', $sessionId, $argosFieldMapping);

        $snFile = $_FILES['sn_file']['tmp_name'];
        $snData = [];
        if (($handle = fopen($snFile, "r")) !== FALSE) {
            $headers = fgetcsv($handle);
            while (($row = fgetcsv($handle)) !== FALSE) {
                if (count($row) == count($headers)) {
                    $snData[] = array_combine($headers, $row);
                }
            }
            fclose($handle);
        }

        $snFieldMapping = [
            'serial_number' => 'Serial number',
            'State' => 'State',
            'pending_collection' => 'Pending collection [Hardware]'
        ];
        storeCsvDataToDatabase($snData, 'sn_data', $sessionId, $snFieldMapping);

        // Create background job
        $jobId = createBackgroundJob($sessionId);
        if (!$jobId) {
            throw new Exception("Failed to create background job");
        }

        // Start background processing
        startBackgroundProcessing($jobId, $sessionId);

        // Redirect to job status page
        header("Location: test11.php?job_id=" . $jobId);
        exit;
    }
} catch (Exception $e) {
    die("Upload error: " . $e->getMessage());
}

$dbRecords = [];
if (isset($_GET['view']) && $_GET['view'] === 'records') {
    $dbRecords = getComplianceRecords();
}

$nonCompliantResults = [];
if (!empty($comparisonResults)) {
    $nonCompliantResults = array_filter($comparisonResults, function($result) {
        return $result['compliance_status'] === 'non-compliant';
    });
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Compare results</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1800px;
            margin: 0 auto;
            padding: 20px;
        }
        .result-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }
        .result-table th, .result-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .compliant { background-color: #dff0d8; }
        .non-compliant { background-color: #f2dede; }
        .action-btns {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
            flex-wrap: wrap;
            gap: 10px;
        }
        .return-btn, .export-btn, .records-btn, .non-compliant-btn, .cancel-btn {
            display: block;
            width: 190px;
            padding: 10px;
            background-color: #007bff;
            color: white;
            text-align: center;
            text-decoration: none;
            border-radius: 5px;
            border: none;
            cursor: pointer;
        }
        .export-btn { background-color: #28a745; }
        .records-btn { background-color: #6c757d; }
        .non-compliant-btn { background-color: #dc3545; }
        .cancel-btn { background-color: #dc3545; }
        .tabs {
            margin-bottom: 20px;
        }
        .tabs a {
            display: inline-block;
            padding: 10px 20px;
            text-decoration: none;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 5px 5px 0 0;
            margin-right: 5px;
        }
        .tabs a.active {
            background-color: #f0f0f0;
            border-bottom: 1px solid white;
        }
        .progress-container {
            width: 100%;
            background-color: #f0f0f0;
            border-radius: 10px;
            margin: 20px 0;
            padding: 5px;
        }
        .progress-bar {
            height: 30px;
            background-color: #4CAF50;
            border-radius: 8px;
            text-align: center;
            line-height: 30px;
            color: white;
            transition: width 0.3s ease;
        }
        .job-status {
            padding: 15px;
            margin: 20px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .status-running { border-left: 5px solid #ffc107; }
        .status-completed { border-left: 5px solid #28a745; }
        .status-failed { border-left: 5px solid #dc3545; }
        .status-cancelled { border-left: 5px solid #6c757d; }
    </style>
</head>
<body>

<?php if ($jobId && !empty($jobStatus)): ?>
    <!-- Job Status View -->
    <div class="job-status status-<?= $jobStatus['status'] ?>">
        <h2>Processing Job: <?= htmlspecialchars($jobId) ?></h2>
        <p><strong>Status:</strong> <?= htmlspecialchars($jobStatus['status']) ?></p>
        
        <?php if ($jobStatus['status'] === 'running' || $jobStatus['status'] === 'pending'): ?>
            <div class="progress-container">
                <div class="progress-bar" id="progressBar" style="width: <?= $jobStatus['progress'] ?>%">
                    <?= $jobStatus['progress'] ?>%
                </div>
            </div>
            <button class="cancel-btn" onclick="cancelJob('<?= $jobId ?>')">Cancel Job</button>
            <p>Please wait while we process your files...</p>
            
            <script>
                function updateProgress() {
                    fetch('?ajax=job_status&job_id=<?= $jobId ?>')
                        .then(response => response.json())
                        .then(data => {
                            if (data) {
                                document.getElementById('progressBar').style.width = data.progress + '%';
                                document.getElementById('progressBar').textContent = data.progress + '%';
                                
                                if (data.status === 'completed') {
                                    window.location.href = '?session_id=<?= $jobId ?>';
                                } else if (data.status === 'failed') {
                                    alert('Job failed: ' + data.error_message);
                                    window.location.href = 'index.html';
                                } else if (data.status === 'cancelled') {
                                    alert('Job was cancelled');
                                    window.location.href = 'index.html';
                                } else {
                                    setTimeout(updateProgress, 2000);
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching job status:', error);
                            setTimeout(updateProgress, 2000);
                        });
                }
                
                function cancelJob(jobId) {
                    if (confirm('Are you sure you want to cancel this job?')) {
                        const formData = new FormData();
                        formData.append('cancel_job', '1');
                        formData.append('job_id', jobId);
                        
                        fetch('', {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert('Job cancellation requested');
                                window.location.href = 'index.html';
                            }
                        });
                    }
                }
                
                setTimeout(updateProgress, 2000);
            </script>
        <?php elseif ($jobStatus['status'] === 'failed'): ?>
            <p style="color: red;"><strong>Error:</strong> <?= htmlspecialchars($jobStatus['error_message']) ?></p>
            <a href="index.html" class="return-btn">Return to Upload Page</a>
        <?php elseif ($jobStatus['status'] === 'cancelled'): ?>
            <p>Job was cancelled.</p>
            <a href="index.html" class="return-btn">Return to Upload Page</a>
        <?php endif; ?>
    </div>

<?php elseif (isset($_GET['view']) && $_GET['view'] === 'records'): ?>
    <!-- Database Records View -->
    <h3>Database Records</h3>
    <div class="action-btns">
        <?php if (isset($sessionId) && $sessionId): ?>
            <a href="test11.php?session_id=<?= $sessionId ?>" class="return-btn">Back to All Results</a>
        <?php else: ?>
            <a href="test11.php" class="return-btn">Back to Upload</a>
        <?php endif; ?>
    </div>
    <div class="tabs">
        <?php if (isset($sessionId) && $sessionId): ?>
            <a href="test11.php?session_id=<?= $sessionId ?>">All Results</a>
            <a href="?view=non_compliant&session_id=<?= $sessionId ?>">Non-Compliant Results</a>
        <?php else: ?>
            <a href="test11.php">All Results</a>
            <a href="?view=non_compliant">Non-Compliant Results</a>
        <?php endif; ?>
        <a href="?view=records" class="active">Database Records</a>
    </div>
    <p>Database has: <?= count($dbRecords) ?> records</p>
    <table class="result-table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Hostname</th>
            <th>DCE UID</th>
            <th>AGROS UID</th>
            <th>DCE Serial#</th>
            <th>SN Serial Number</th>
            <th>AGROS Serial#</th>
            <th>DCE Livedate</th>
            <th>DCE Userwhen</th>
            <th>Created At</th>
        </tr>
        </thead>
        <tbody>
        <?php foreach($dbRecords as $record): ?>
            <tr class="<?= $record['compliance_status'] ?>">
                <td><?= htmlspecialchars($record['id']) ?></td>
                <td><?= htmlspecialchars($record['hostname']) ?></td>
                <td><?= htmlspecialchars($record['dce_useruid']) ?></td>
                <td><?= htmlspecialchars($record['argos_owner']) ?></td>
                <td><?= htmlspecialchars($record['dce_sn']) ?></td>
                <td><?= htmlspecialchars($record['argos_serial']) ?></td>
                <td><?= htmlspecialchars($record['sn_serial']) ?></td>
                <td><?= htmlspecialchars($record['dce_livedate']) ?></td>
                <td><?= htmlspecialchars($record['dce_userwhen']) ?></td>
                <td><?= $record['created_at'] ?></td>
            </tr>
        <?php endforeach; ?>
        </tbody>
    </table>

<?php elseif (isset($_GET['view']) && $_GET['view'] === 'non_compliant'): ?>
    <!-- Non-Compliant Results View -->
    <h3>Non-Compliant Results</h3>
    <div class="action-btns">
        <a href="test11.php?session_id=<?= $sessionId ?>" class="return-btn">Back to All Results</a>
        <?php if (isset($sessionId) && $sessionId): ?>
            <a href="?export=non_compliant&session_id=<?= $sessionId ?>" class="export-btn">Export Results</a>
        <?php endif; ?>
    </div>
    <div class="tabs">
        <a href="test11.php?session_id=<?= $sessionId ?>">All Results</a>
        <a href="?view=non_compliant&session_id=<?= $sessionId ?>" class="active">Non-Compliant Results</a>
        <a href="?view=records<?= isset($sessionId) ? '&session_id='.$sessionId : '' ?>">Database Records</a>
    </div>
    <p>This run finds: <?= count($nonCompliantResults) ?> non-compliant records</p>
    <table class="result-table">
        <thead>
        <tr>
            <th>Hostname</th>
            <th>DCE UID</th>
            <th>AGROS UID</th>
            <th>DCE Serial#</th>
            <th>AGROS Serial#</th>
            <th>SN Serial Number</th>
            <th>DCE Livedate</th>
            <th>DCE Userwhen</th>
        </tr>
        </thead>
        <tbody>
        <?php foreach($nonCompliantResults as $result): ?>
            <tr class="non-compliant">
                <td><?= htmlspecialchars($result['hostname']) ?></td>
                <td><?= htmlspecialchars($result['dce_useruid']) ?></td>
                <td><?= htmlspecialchars($result['argos_owner']) ?></td>
                <td><?= htmlspecialchars($result['dce_sn']) ?></td>
                <td><?= htmlspecialchars($result['argos_serial']) ?></td>
                <td><?= htmlspecialchars($result['sn_serial']) ?></td>
                <td><?= htmlspecialchars($result['dce_livedate']) ?></td>
                <td><?= htmlspecialchars($result['dce_userwhen']) ?></td>
            </tr>
        <?php endforeach; ?>
        </tbody>
    </table>

<?php else: ?>
    <!-- All Results View (Default) -->
    <div class="action-btns">
        <a href="index.html" class="return-btn">Return to upload page</a>
        <?php if (isset($sessionId) && $sessionId): ?>
            <a href="?export=non_compliant&session_id=<?= $sessionId ?>" class="export-btn">Export Results</a>
        <?php endif; ?>
    </div>
    <div class="tabs">
        <a href="test11.php?session_id=<?= $sessionId ?>" class="active">All Results</a>
        <a href="?view=non_compliant&session_id=<?= $sessionId ?>">Non-Compliant Results</a>
        <a href="?view=records<?= isset($sessionId) ? '&session_id='.$sessionId : '' ?>">Database Records</a>
    </div>
    <p>This run returns: <?= count($comparisonResults) ?> records in total</p>
    <table class="result-table">
        <thead>
        <tr>
            <th>Hostname</th>
            <th>DCE UID</th>
            <th>AGROS UID</th>
            <th>DCE Serial#</th>
            <th>AGROS Serial#</th>
            <th>SN Serial Number</th>
            <th>DCE Livedate</th>
            <th>DCE Userwhen</th>
            <th>DCE status</th>
            <th>AGROS State</th>
            <th>SN State</th>
            <th>SN Pending collection</th>
            <th>Compliance status</th>
            <th>Reason</th>
        </tr>
        </thead>
        <tbody>
        <?php foreach($comparisonResults as $result): ?>
            <tr class="<?= $result['compliance_status'] ?>">
                <td><?= htmlspecialchars($result['hostname']) ?></td>
                <td><?= htmlspecialchars($result['dce_useruid']) ?></td>
                <td><?= htmlspecialchars($result['argos_owner']) ?></td>
                <td><?= htmlspecialchars($result['dce_sn']) ?></td>
                <td><?= htmlspecialchars($result['argos_serial']) ?></td>
                <td><?= htmlspecialchars($result['sn_serial']) ?></td>
                <td><?= htmlspecialchars($result['dce_livedate']) ?></td>
                <td><?= htmlspecialchars($result['dce_userwhen']) ?></td>
                <td><?= htmlspecialchars($result['dce_status']) ?></td>
                <td><?= htmlspecialchars($result['argos_state']) ?></td>
                <td><?= htmlspecialchars($result['sn_state']) ?></td>
                <td><?= htmlspecialchars($result['sn_pending_collection']) ?></td>
                <td><?= $result['compliance_status'] ?></td>
                <td><?= htmlspecialchars($result['compliance_reason']) ?></td>
            </tr>
        <?php endforeach; ?>
        </tbody>
    </table>
<?php endif; ?>

</body>
</html>
