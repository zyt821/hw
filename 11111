<?php
// async_processor_debug.php - 带详细日志的调试版本

// 启用错误报告
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('log_errors', 1);
ini_set('error_log', __DIR__ . '/async_processor_error.log');

// 获取任务ID
$task_id = $argv[1] ?? '';
if (empty($task_id)) {
    die("缺少任务ID");
}

// 记录开始时间
$start_time = time();
error_log("[$task_id] 异步处理开始: " . date('Y-m-d H:i:s'));

// 包含你的数据库函数
require_once 'your_database_functions.php'; // 替换为实际文件名

// 调试函数
function debug_log($task_id, $message) {
    error_log("[$task_id] " . date('H:i:s') . " - $message");
}

function safe_update_status($task_id, $status, $progress, $message) {
    try {
        debug_log($task_id, "更新状态: $status ($progress%) - $message");
        $result = updateTaskStatus($task_id, $status, $progress, $message);
        if (!$result) {
            debug_log($task_id, "状态更新失败");
        }
        return $result;
    } catch (Exception $e) {
        debug_log($task_id, "状态更新异常: " . $e->getMessage());
        return false;
    }
}

try {
    debug_log($task_id, "开始处理任务");
    
    // 获取任务信息
    $task_status = getTaskStatus($task_id);
    if (!$task_status) {
        debug_log($task_id, "任务未找到");
        die("Task not found: $task_id");
    }
    
    $session_id = $task_status['session_id'];
    debug_log($task_id, "会话ID: $session_id");
    
    safe_update_status($task_id, 'processing', 5, '开始处理数据...');
    
    // 检查取消状态
    if (isTaskCancelled($task_id)) {
        debug_log($task_id, "任务已被取消");
        safe_update_status($task_id, 'cancelled', 0, '任务已被取消');
        exit(0);
    }
    
    safe_update_status($task_id, 'processing', 10, '初始化比较工具...');
    
    // 创建比较工具
    try {
        debug_log($task_id, "创建ExcelComparisonTool实例");
        $comparator = new ExcelComparisonTool(); // 先使用原来的类测试
        $comparator->setSessionId($session_id);
    } catch (Exception $e) {
        debug_log($task_id, "创建比较工具失败: " . $e->getMessage());
        safe_update_status($task_id, 'error', 0, '创建比较工具失败: ' . $e->getMessage());
        exit(1);
    }
    
    safe_update_status($task_id, 'processing', 20, '加载DCE数据...');
    
    // 尝试加载DCE数据
    try {
        debug_log($task_id, "开始加载DCE数据");
        $dce_data = $comparator->importDceFile();
        debug_log($task_id, "DCE数据加载完成，记录数: " . count($dce_data));
        
        if (empty($dce_data)) {
            debug_log($task_id, "警告：DCE数据为空");
        }
    } catch (Exception $e) {
        debug_log($task_id, "加载DCE数据失败: " . $e->getMessage());
        safe_update_status($task_id, 'error', 0, '加载DCE数据失败: ' . $e->getMessage());
        exit(1);
    }
    
    // 检查取消状态
    if (isTaskCancelled($task_id)) {
        debug_log($task_id, "任务在加载DCE数据后被取消");
        safe_update_status($task_id, 'cancelled', 0, '任务已被取消');
        exit(0);
    }
    
    safe_update_status($task_id, 'processing', 40, '加载ARGOS数据...');
    
    // 尝试加载ARGOS数据
    try {
        debug_log($task_id, "开始加载ARGOS数据");
        $argos_data = $comparator->importArgosFile();
        debug_log($task_id, "ARGOS数据加载完成，记录数: " . count($argos_data));
    } catch (Exception $e) {
        debug_log($task_id, "加载ARGOS数据失败: " . $e->getMessage());
        safe_update_status($task_id, 'error', 0, '加载ARGOS数据失败: ' . $e->getMessage());
        exit(1);
    }
    
    safe_update_status($task_id, 'processing', 60, '加载SN数据...');
    
    // 尝试加载SN数据
    try {
        debug_log($task_id, "开始加载SN数据");
        $sn_data = $comparator->importSnFile();
        debug_log($task_id, "SN数据加载完成，记录数: " . count($sn_data));
    } catch (Exception $e) {
        debug_log($task_id, "加载SN数据失败: " . $e->getMessage());
        safe_update_status($task_id, 'error', 0, '加载SN数据失败: ' . $e->getMessage());
        exit(1);
    }
    
    safe_update_status($task_id, 'processing', 70, '清理数据...');
    
    // 清理数据
    try {
        debug_log($task_id, "开始清理数据");
        $comparator->cleanAllData();
        debug_log($task_id, "数据清理完成");
    } catch (Exception $e) {
        debug_log($task_id, "数据清理失败: " . $e->getMessage());
        safe_update_status($task_id, 'error', 0, '数据清理失败: ' . $e->getMessage());
        exit(1);
    }
    
    safe_update_status($task_id, 'processing', 80, '开始数据比较分析...');
    
    // 执行比较
    try {
        debug_log($task_id, "开始数据比较");
        $results = $comparator->compareData(100); // 使用较小的批次大小
        debug_log($task_id, "数据比较完成，结果数: " . count($results));
    } catch (Exception $e) {
        debug_log($task_id, "数据比较失败: " . $e->getMessage());
        safe_update_status($task_id, 'error', 0, '数据比较失败: ' . $e->getMessage());
        exit(1);
    }
    
    safe_update_status($task_id, 'processing', 95, '保存比较结果...');
    
    // 保存结果
    try {
        debug_log($task_id, "保存结果到数据库");
        saveResultsToDatabase($results);
        debug_log($task_id, "结果保存完成");
        
        debug_log($task_id, "保存临时结果");
        $final_session_id = storeComparisonResults($results);
        debug_log($task_id, "最终会话ID: $final_session_id");
    } catch (Exception $e) {
        debug_log($task_id, "保存结果失败: " . $e->getMessage());
        safe_update_status($task_id, 'error', 0, '保存结果失败: ' . $e->getMessage());
        exit(1);
    }
    
    // 完成
    safe_update_status($task_id, 'completed', 100, '处理完成！', $final_session_id);
    
    $end_time = time();
    $duration = $end_time - $start_time;
    debug_log($task_id, "任务完成，耗时: {$duration}秒");
    
} catch (Exception $e) {
    debug_log($task_id, "未捕获异常: " . $e->getMessage());
    debug_log($task_id, "异常堆栈: " . $e->getTraceAsString());
    safe_update_status($task_id, 'error', 0, '处理出错: ' . $e->getMessage());
}

debug_log($task_id, "异步处理脚本结束");
?>
