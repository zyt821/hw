-- Create table for background job control
CREATE TABLE IF NOT EXISTS background_jobs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    job_id VARCHAR(50) UNIQUE NOT NULL,
    status ENUM('pending', 'running', 'completed', 'cancelled', 'failed') DEFAULT 'pending',
    progress INT DEFAULT 0,
    total_records INT DEFAULT 0,
    session_id VARCHAR(50),
    error_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_job_id (job_id),
    INDEX idx_status (status),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Create table for job cancellation flags
CREATE TABLE IF NOT EXISTS job_cancel_flags (
    job_id VARCHAR(50) PRIMARY KEY,
    cancel_requested BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_cancel_requested (cancel_requested)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
=======================
  <?php
// background_processor.php - This file will be executed in the background
error_reporting(E_ALL);
ini_set('display_errors', 1);
set_time_limit(0); // No time limit for background process

require_once "ExcelComparisonTool.php";

// Database connection details
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASS', '');
define('DB_NAME', 'compliance_db');

function connectToDatabase() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASS);
    if ($conn->connect_error) {
        throw new Exception("Database connection failed: " . $conn->connect_error);
    }
    $conn->select_db(DB_NAME);
    return $conn;
}

function updateJobStatus($jobId, $status, $progress = null, $errorMessage = null) {
    try {
        $conn = connectToDatabase();
        $sql = "UPDATE background_jobs SET status = ?, updated_at = NOW()";
        $params = [$status];
        $types = "s";
        
        if ($progress !== null) {
            $sql .= ", progress = ?";
            $params[] = $progress;
            $types .= "i";
        }
        
        if ($errorMessage !== null) {
            $sql .= ", error_message = ?";
            $params[] = $errorMessage;
            $types .= "s";
        }
        
        $sql .= " WHERE job_id = ?";
        $params[] = $jobId;
        $types .= "s";
        
        $stmt = $conn->prepare($sql);
        $stmt->bind_param($types, ...$params);
        $stmt->execute();
        $stmt->close();
        $conn->close();
    } catch (Exception $e) {
        error_log("Failed to update job status: " . $e->getMessage());
    }
}

function checkCancellation($jobId) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("SELECT cancel_requested FROM job_cancel_flags WHERE job_id = ?");
        $stmt->bind_param("s", $jobId);
        $stmt->execute();
        $stmt->bind_result($cancelRequested);
        $stmt->fetch();
        $stmt->close();
        $conn->close();
        return (bool)$cancelRequested;
    } catch (Exception $e) {
        error_log("Failed to check cancellation: " . $e->getMessage());
        return false;
    }
}

function loadCsvDataFromDatabase($tableName, $sessionId) {
    try {
        $conn = connectToDatabase();
        switch ($tableName) {
            case 'dce_data':
                $sql = "SELECT hostname, useruid, sn_number as 'serial', livedate, userwhen FROM dce_data WHERE session_id = ?";
                break;
            case 'argos_data':
                $sql = "SELECT hostname, owner, serial_number as 'serial#', state FROM argos_data WHERE session_id = ?";
                break;
            case 'sn_data':
                $sql = "SELECT serial_number as 'Serial number', State, pending_collection as 'Pending collection [Hardware]' FROM sn_data WHERE session_id = ?";
                break;
            default:
                throw new Exception("Unknown table name: $tableName");
        }

        $stmt = $conn->prepare($sql);
        $stmt->bind_param("s", $sessionId);
        $stmt->execute();
        $result = $stmt->get_result();
        $data = [];
        while ($row = $result->fetch_assoc()) {
            $data[] = $row;
        }
        $stmt->close();
        $conn->close();
        return $data;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return [];
    }
}

function storeComparisonResults($results, $sessionId) {
    try {
        $conn = connectToDatabase();
        $serializedResults = json_encode($results);
        $stmt = $conn->prepare("INSERT INTO temp_comparison_results (session_id, result_data) VALUES (?, ?)");
        $stmt->bind_param("ss", $sessionId, $serializedResults);
        if (!$stmt->execute()) {
            throw new Exception("Failed to store comparison results: " . $stmt->error);
        }
        $stmt->close();
        $conn->close();
        return true;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}

function saveResultsToDatabase($results) {
    try {
        $nonCompliantResults = array_filter($results, function($result) {
            return $result['compliance_status'] === 'non-compliant';
        });

        $conn = connectToDatabase();
        $stmt = $conn->prepare("INSERT INTO compliance_results 
            (hostname, dce_useruid, argos_owner, dce_sn, argos_serial, sn_serial, 
             dce_livedate, dce_userwhen, argos_state, sn_state, sn_pending_collection, 
             dce_status, compliance_status, compliance_reason) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

        if (!$stmt) {
            throw new Exception("Prepare statement failed: " . $conn->error);
        }

        foreach ($nonCompliantResults as $result) {
            $stmt->bind_param(
                "ssssssssssssss",
                $result['hostname'], $result['dce_useruid'], $result['argos_owner'],
                $result['dce_sn'], $result['argos_serial'], $result['sn_serial'],
                $result['dce_livedate'], $result['dce_userwhen'], $result['argos_state'],
                $result['sn_state'], $result['sn_pending_collection'], $result['dce_status'],
                $result['compliance_status'], $result['compliance_reason']
            );
            if (!$stmt->execute()) {
                throw new Exception("Execute failed: " . $stmt->error);
            }
        }
        $stmt->close();
        $conn->close();
        return true;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}

// Main processing logic
try {
    if ($argc < 3) {
        throw new Exception("Usage: php background_processor.php <job_id> <session_id>");
    }

    $jobId = $argv[1];
    $sessionId = $argv[2];

    // Update job status to running
    updateJobStatus($jobId, 'running', 0);

    // Create comparator instance
    $comparator = new ExcelComparisonTool();
    $comparator->setSessionId($sessionId);

    // Check for cancellation before starting
    if (checkCancellation($jobId)) {
        updateJobStatus($jobId, 'cancelled');
        exit(0);
    }

    // Load data from database
    updateJobStatus($jobId, 'running', 10);
    $comparator->importDceFile();
    
    if (checkCancellation($jobId)) {
        updateJobStatus($jobId, 'cancelled');
        exit(0);
    }

    updateJobStatus($jobId, 'running', 20);
    $comparator->importArgosFile();
    
    if (checkCancellation($jobId)) {
        updateJobStatus($jobId, 'cancelled');
        exit(0);
    }

    updateJobStatus($jobId, 'running', 30);
    $comparator->importSnFile();

    if (checkCancellation($jobId)) {
        updateJobStatus($jobId, 'cancelled');
        exit(0);
    }

    // Clean data
    updateJobStatus($jobId, 'running', 40);
    $comparator->cleanAllData();

    if (checkCancellation($jobId)) {
        updateJobStatus($jobId, 'cancelled');
        exit(0);
    }

    // Perform comparison with progress updates
    updateJobStatus($jobId, 'running', 50);
    
    // Modified compareData to support cancellation checks
    $results = $comparator->compareDataWithCancellation($jobId, function($progress) use ($jobId) {
        updateJobStatus($jobId, 'running', 50 + ($progress * 0.4)); // 50-90%
    });

    if ($results === false) {
        // Comparison was cancelled
        updateJobStatus($jobId, 'cancelled');
        exit(0);
    }

    // Save results
    updateJobStatus($jobId, 'running', 90);
    saveResultsToDatabase($results);

    if (checkCancellation($jobId)) {
        updateJobStatus($jobId, 'cancelled');
        exit(0);
    }

    updateJobStatus($jobId, 'running', 95);
    storeComparisonResults($results, $jobId);

    // Complete
    updateJobStatus($jobId, 'completed', 100);

} catch (Exception $e) {
    error_log("Background process error: " . $e->getMessage());
    if (isset($jobId)) {
        updateJobStatus($jobId, 'failed', null, $e->getMessage());
    }
    exit(1);
}
?>
==================
<?php
class ExcelComparisonTool {
    private $dceData = [];
    private $argosData = [];
    private $snData = [];
    private $comparisonResults = [];
    private $sessionId = '';

    public function setSessionId($sessionId) {
        $this->sessionId = $sessionId;
        return $this;
    }

    public function setComparisonResults(array $results) {
        $this->comparisonResults = $results;
        return $this;
    }

    public function importDceFile($sessionId = null) {
        $sessionId = $sessionId ?: $this->sessionId;
        if (!$sessionId) {
            throw new Exception("Session ID is required");
        }
        $this->dceData = loadCsvDataFromDatabase('dce_data', $sessionId);
        return $this->dceData;
    }

    public function importArgosFile($sessionId = null) {
        $sessionId = $sessionId ?: $this->sessionId;
        if (!$sessionId) {
            throw new Exception("Session ID is required");
        }
        $this->argosData = loadCsvDataFromDatabase('argos_data', $sessionId);
        return $this->argosData;
    }

    public function importSnFile($sessionId = null) {
        $sessionId = $sessionId ?: $this->sessionId;
        if (!$sessionId) {
            throw new Exception("Session ID is required");
        }
        $this->snData = loadCsvDataFromDatabase('sn_data', $sessionId);
        return $this->snData;
    }

    // NEW: Compare data with cancellation support
    public function compareDataWithCancellation($jobId, $progressCallback = null, int $batchSize = 1000) {
        $comparisonResults = [];

        // Helper function to check cancellation
        $checkCancel = function() use ($jobId) {
            try {
                $conn = new mysqli('localhost', 'root', '', 'compliance_db');
                $stmt = $conn->prepare("SELECT cancel_requested FROM job_cancel_flags WHERE job_id = ?");
                $stmt->bind_param("s", $jobId);
                $stmt->execute();
                $stmt->bind_result($cancelRequested);
                $stmt->fetch();
                $stmt->close();
                $conn->close();
                return (bool)$cancelRequested;
            } catch (Exception $e) {
                return false;
            }
        };

        // Step 1: Create indexed lookup arrays
        $argosMap = [];
        foreach ($this->argosData as $argosRow) {
            $serialKey = strtolower($argosRow['serial#']);
            if (!isset($argosMap[$serialKey])) {
                $argosMap[$serialKey] = [];
            }
            $argosMap[$serialKey][] = $argosRow;
        }

        $snMap = [];
        foreach ($this->snData as $snRow) {
            $serialKey = strtolower($snRow['Serial number']);
            if (!isset($snMap[$serialKey])) {
                $snMap[$serialKey] = [];
            }
            $snMap[$serialKey][] = $snRow;
        }

        // Step 2: Process DCE data in batches with cancellation checks
        $totalDce = count($this->dceData);
        for ($i = 0; $i < $totalDce; $i += $batchSize) {
            // Check for cancellation
            if ($checkCancel()) {
                return false;
            }

            $batch = array_slice($this->dceData, $i, $batchSize);

            foreach ($batch as $dceRow) {
                $dceSerial = strtolower($dceRow['serial'] ?? '');
                $matchedArgosRows = $argosMap[$dceSerial] ?? [];

                if (empty($matchedArgosRows)) {
                    $comparisonResults[] = [
                        'hostname' => $dceRow['hostname'] ?? 'N/A',
                        'dce_useruid' => $dceRow['useruid'] ?? 'N/A',
                        'dce_sn' => $dceRow['serial'] ?? 'N/A',
                        'argos_owner' => 'N/A',
                        'argos_serial' => 'N/A',
                        'sn_serial' => 'N/A',
                        'dce_livedate' => $dceRow['livedate'] ?? 'N/A',
                        'dce_userwhen' => $dceRow['userwhen'] ?? 'N/A',
                        'argos_state' => 'N/A',
                        'sn_state' => 'N/A',
                        'sn_pending_collection' => 'N/A',
                        'dce_status' => 'N/A',
                        'compliance_status' => 'non-compliant',
                        'compliance_reason' => 'No matching ARGOS entry'
                    ];
                    continue;
                }

                foreach ($matchedArgosRows as $argosRow) {
                    $argosSerial = strtolower($argosRow['serial#'] ?? '');
                    $matchedSnRows = $snMap[$argosSerial] ?? [];

                    if (empty($matchedSnRows)) {
                        $comparisonResults[] = [
                            'hostname' => $dceRow['hostname'] ?? 'N/A',
                            'dce_useruid' => $dceRow['useruid'] ?? 'N/A',
                            'dce_sn' => $dceRow['serial'] ?? 'N/A',
                            'argos_owner' => $argosRow['owner'] ?? 'N/A',
                            'argos_serial' => $argosRow['serial#'] ?? 'N/A',
                            'sn_serial' => 'N/A',
                            'dce_livedate' => $dceRow['livedate'] ?? 'N/A',
                            'dce_userwhen' => $dceRow['userwhen'] ?? 'N/A',
                            'argos_state' => $argosRow['state'] ?? 'N/A',
                            'sn_state' => 'N/A',
                            'sn_pending_collection' => 'N/A',
                            'dce_status' => $this->checkDceStatus($dceRow, $argosRow),
                            'compliance_status' => 'non-compliant',
                            'compliance_reason' => 'No matching SN entry'
                        ];
                        continue;
                    }

                    foreach ($matchedSnRows as $snRow) {
                        $dceStatus = $this->checkDceStatus($dceRow, $argosRow);
                        $complianceResult = $this->checkCompliance($dceStatus, $argosRow, $snRow);

                        $comparisonResults[] = [
                            'hostname' => $dceRow['hostname'] ?? 'N/A',
                            'dce_useruid' => $dceRow['useruid'] ?? 'N/A',
                            'dce_sn' => $dceRow['serial'] ?? 'N/A',
                            'argos_owner' => $argosRow['owner'] ?? 'N/A',
                            'argos_serial' => $argosRow['serial#'] ?? 'N/A',
                            'sn_serial' => $snRow['Serial number'] ?? 'N/A',
                            'dce_livedate' => $dceRow['livedate'] ?? 'N/A',
                            'dce_userwhen' => $dceRow['userwhen'] ?? 'N/A',
                            'argos_state' => $argosRow['state'] ?? 'N/A',
                            'sn_state' => $snRow['State'] ?? 'N/A',
                            'sn_pending_collection' => $snRow['Pending collection [Hardware]'] ?? 'N/A',
                            'dce_status' => $dceStatus,
                            'compliance_status' => $complianceResult['status'],
                            'compliance_reason' => $complianceResult['reason']
                        ];
                    }
                }
            }

            // Report progress
            if ($progressCallback) {
                $progress = ($i + $batchSize) / $totalDce;
                $progressCallback(min($progress * 0.33, 0.33)); // First 33%
            }

            unset($batch);
            if (function_exists('gc_collect_cycles')) {
                gc_collect_cycles();
            }
        }

        // Step 3: Process ARGOS records not in DCE
        $totalArgos = count($this->argosData);
        for ($i = 0; $i < $totalArgos; $i += $batchSize) {
            if ($checkCancel()) {
                return false;
            }

            $batch = array_slice($this->argosData, $i, $batchSize);

            foreach ($batch as $argosRow) {
                $argosSerial = strtolower($argosRow['serial#'] ?? '');
                $found = false;
                foreach ($this->dceData as $dceRow) {
                    if (strcasecmp($dceRow['serial'] ?? '', $argosRow['serial#'] ?? '') === 0) {
                        $found = true;
                        break;
                    }
                }

                if (!$found) {
                    $matchedSnRows = $snMap[$argosSerial] ?? [];
                    if (empty($matchedSnRows)) {
                        $comparisonResults[] = [
                            'hostname' => $argosRow['hostname'] ?? 'N/A',
                            'dce_useruid' => 'N/A',
                            'dce_sn' => 'N/A',
                            'argos_owner' => $argosRow['owner'] ?? 'N/A',
                            'argos_serial' => $argosRow['serial#'] ?? 'N/A',
                            'sn_serial' => 'N/A',
                            'dce_livedate' => 'N/A',
                            'dce_userwhen' => 'N/A',
                            'argos_state' => $argosRow['state'] ?? 'N/A',
                            'sn_state' => 'N/A',
                            'sn_pending_collection' => 'N/A',
                            'dce_status' => 'N/A',
                            'compliance_status' => 'non-compliant',
                            'compliance_reason' => 'In ARGOS but not in DCE or SN'
                        ];
                    } else {
                        foreach ($matchedSnRows as $snRow) {
                            $complianceResult = $this->checkCompliance('dce_disabled', $argosRow, $snRow);
                            $comparisonResults[] = [
                                'hostname' => $argosRow['hostname'] ?? 'N/A',
                                'dce_useruid' => 'N/A',
                                'dce_sn' => 'N/A',
                                'argos_owner' => $argosRow['owner'] ?? 'N/A',
                                'argos_serial' => $argosRow['serial#'] ?? 'N/A',
                                'sn_serial' => $snRow['Serial number'] ?? 'N/A',
                                'dce_livedate' => 'N/A',
                                'dce_userwhen' => 'N/A',
                                'argos_state' => $argosRow['state'] ?? 'N/A',
                                'sn_state' => $snRow['State'] ?? 'N/A',
                                'sn_pending_collection' => $snRow['Pending collection [Hardware]'] ?? 'N/A',
                                'dce_status' => 'dce_disabled',
                                'compliance_status' => $complianceResult['status'],
                                'compliance_reason' => $complianceResult['reason']
                            ];
                        }
                    }
                }
            }

            if ($progressCallback) {
                $progress = ($i + $batchSize) / $totalArgos;
                $progressCallback(0.33 + min($progress * 0.33, 0.33)); // 33-66%
            }

            unset($batch);
            if (function_exists('gc_collect_cycles')) {
                gc_collect_cycles();
            }
        }

        // Step 4: Process SN records not in DCE or ARGOS
        $totalSn = count($this->snData);
        for ($i = 0; $i < $totalSn; $i += $batchSize) {
            if ($checkCancel()) {
                return false;
            }

            $batch = array_slice($this->snData, $i, $batchSize);

            foreach ($batch as $snRow) {
                $foundInDce = false;
                foreach ($this->dceData as $dceRow) {
                    if (strcasecmp($dceRow['serial'] ?? '', $snRow['Serial number'] ?? '') === 0) {
                        $foundInDce = true;
                        break;
                    }
                }

                $foundInArgos = false;
                if (!$foundInDce) {
                    foreach ($this->argosData as $argosRow) {
                        if (strcasecmp($argosRow['serial#'] ?? '', $snRow['Serial number'] ?? '') === 0) {
                            $foundInArgos = true;
                            break;
                        }
                    }
                }

                if (!$foundInDce && !$foundInArgos) {
                    $comparisonResults[] = [
                        'hostname' => 'N/A',
                        'dce_useruid' => 'N/A',
                        'dce_sn' => 'N/A',
                        'argos_owner' => 'N/A',
                        'argos_serial' => 'N/A',
                        'sn_serial' => $snRow['Serial number'] ?? 'N/A',
                        'dce_livedate' => 'N/A',
                        'dce_userwhen' => 'N/A',
                        'argos_state' => 'N/A',
                        'sn_state' => $snRow['State'] ?? 'N/A',
                        'sn_pending_collection' => $snRow['Pending collection [Hardware]'] ?? 'N/A',
                        'dce_status' => 'N/A',
                        'compliance_status' => 'non-compliant',
                        'compliance_reason' => 'In SN but not in DCE or ARGOS'
                    ];
                }
            }

            if ($progressCallback) {
                $progress = ($i + $batchSize) / $totalSn;
                $progressCallback(0.66 + min($progress * 0.34, 0.34)); // 66-100%
            }

            unset($batch);
            if (function_exists('gc_collect_cycles')) {
                gc_collect_cycles();
            }
        }

        $this->comparisonResults = $comparisonResults;
        return $comparisonResults;
    }

    // Original compareData method (kept for compatibility)
    public function compareData(int $batchSize = 1000): array {
        // This now just calls the new method without cancellation support
        return $this->compareDataWithCancellation('', null, $batchSize);
    }

    private function checkDceStatus(array $dceRow, array $argosRow): string {
        $ownerMatch = strcasecmp($dceRow['useruid'], $argosRow['owner']) === 0;
        return ($ownerMatch) ? 'dce_active' : 'dce_disabled';
    }

    private function checkCompliance(string $dceStatus, array $argosRow, array $snRow): array {
        $argosState = strtolower($argosRow['state']);
        $snState = strtolower($snRow['State']);
        $snPendingCollection = strtolower($snRow['Pending collection [Hardware]']);

        $status = 'non-compliant';
        $reason = '';

        if ($dceStatus === 'dce_disabled') {
            switch ($argosState) {
                case 'state_unassigned':
                    if ($snState === 'in stock') {
                        $status = 'compliant';
                        $reason = 'DCE disabled, Argos = state_unassigned, SN in stock';
                    } else {
                        $reason = "DCE disabled, Argos = state_unassigned, but SN state is not 'in stock'";
                    }
                    break;
                case 'state_pending_signoff':
                case 'state_signed_off':
                    $reason = "DCE disabled with ARGOS = $argosState is non-compliant";
                    break;
                case 'state_pending_collection':
                    if ($snPendingCollection === 'true') {
                        $status = 'compliant';
                        $reason = 'DCE disabled, Argos = state_pending_collection, SN pending collection is true';
                    } else {
                        $reason = 'DCE disabled, Argos = state_pending_collection, but SN pending collection is not true';
                    }
                    break;
                case 'state_retired':
                    if ($snState === 'retired' || $snState === 'missing') {
                        $status = 'compliant';
                        $reason = "DCE disabled, Argos = state_retired, SN state is $snState";
                    } else {
                        $reason = "DCE disabled, Argos = state_retired, but SN state is not 'retired' or 'missing'";
                    }
                    break;
                default:
                    $reason = "Unknown ARGOS state: $argosState";
                    break;
            }
        } else if ($dceStatus === 'dce_active') {
            switch ($argosState) {
                case 'state_unassigned':
                    if ($snState === 'in stock') {
                        $status = 'compliant';
                        $reason = 'DCE not disabled, Argos = state_unassigned, SN in stock';
                    } else {
                        $reason = "DCE not disabled, Argos = state_unassigned, but SN state is not 'in stock'";
                    }
                    break;
                case 'state_pending_signoff':
                case 'state_signed_off':
                    if ($snState === 'in use') {
                        $status = 'compliant';
                        $reason = "DCE not disabled, Argos = $argosState, SN in use";
                    } else {
                        $reason = "DCE not disabled, Argos = $argosState, but SN state is not 'in use'";
                    }
                    break;
                case 'state_pending_collection':
                    if ($snPendingCollection === 'true') {
                        $status = 'compliant';
                        $reason = 'DCE not disabled, Argos = state_pending_collection, SN pending collection is true';
                    } else {
                        $reason = 'DCE not disabled, Argos = state_pending_collection, but SN pending collection is not true';
                    }
                    break;
                case 'state_retired':
                    $reason = 'DCE not disabled but Argos = state_retired';
                    break;
                default:
                    $reason = "Unknown ARGOS state: $argosState";
                    break;
            }
        } else {
            $reason = "Unknown DCE status: $dceStatus";
        }

        return [
            'status' => $status,
            'reason' => $reason
        ];
    }

    public function exportNonCompliantResults() {
        $nonCompliantResults = array_filter($this->comparisonResults, function($result) {
            return $result['compliance_status'] === 'non-compliant';
        });

        $headers = [
            'Hostname', 'DCE UserUID', 'ARGOS Owner', 'DCE SN#', 'ARGOS Serial#',
            'SN Serial Number', 'DCE Livedate', 'DCE Userwhen', 'ARGOS State',
            'SN State', 'SN Pending Collection', 'DCE Status', 'Compliance Status',
            'Compliance Reason'
        ];

        $exportDir = __DIR__ . '/exports/';
        if (!is_dir($exportDir)) {
            mkdir($exportDir, 0777, true);
        }

        $filename = $exportDir . 'non_compliant_results_' . date('YmdHis') . '.csv';
        $file = fopen($filename, 'w');
        fputcsv($file, $headers);

        foreach ($nonCompliantResults as $result) {
            $row = [];
            foreach ($headers as $header) {
                $key = $this->getKeyFromHeader($header);
                $row[] = $result[$key] ?? 'N/A';
            }
            fputcsv($file, $row);
        }

        fclose($file);
        return $filename;
    }

    private function getKeyFromHeader($header) {
        $mapping = [
            'Hostname' => 'hostname',
            'DCE UserUID' => 'dce_useruid',
            'ARGOS Owner' => 'argos_owner',
            'DCE SN#' => 'dce_sn',
            'ARGOS Serial#' => 'argos_serial',
            'SN Serial Number'=> 'sn_serial',
            'DCE Livedate' => 'dce_livedate',
            'DCE Userwhen' => 'dce_userwhen',
            'ARGOS State' => 'argos_state',
            'SN State' => 'sn_state',
            'SN Pending Collection' => 'sn_pending_collection',
            'DCE Status' => 'dce_status',
            'Compliance Status' => 'compliance_status',
            'Compliance Reason' => 'compliance_reason'
        ];
        return $mapping[$header] ?? strtolower(str_replace(' ', '_', $header));
    }

    public function cleanDceData() {
        if (empty($this->dceData)) {
            return;
        }
        $this->dceData = array_filter($this->dceData, function ($row) {
            if (empty($row['serial']) || $row['serial'] === 'N/A' || $row['serial'] === '') {
                return false;
            }
            $nonEmptyValues = array_filter($row, function ($value) {
                return !empty($value) && $value !== 'N/A' && $value !== '';
            });
            return count($nonEmptyValues) > 0;
        });
        $this->dceData = array_values($this->dceData);
        return $this->dceData;
    }

    public function cleanArgosData() {
        if (empty($this->argosData)) {
            return;
        }
        $this->argosData = array_filter($this->argosData, function ($row) {
            if (empty($row['serial#']) || $row['serial#'] === 'N/A' || $row['serial#'] === '') {
                return false;
            }
            $nonEmptyValues = array_filter($row, function ($value) {
                return !empty($value) && $value !== 'N/A' && $value !== '';
            });
            return count($nonEmptyValues) > 0;
        });
        $this->argosData = array_values($this->argosData);
        return $this->argosData;
    }

    public function cleanSnData() {
        if (empty($this->snData)) {
            return;
        }
        $this->snData = array_filter($this->snData, function ($row) {
            if (empty($row['Serial number']) || $row['Serial number'] === 'N/A' || $row['Serial number'] === '') {
                return false;
            }
            $nonEmptyValues = array_filter($row, function ($value) {
                return !empty($value) && $value !== 'N/A' && $value !== '';
            });
            return count($nonEmptyValues) > 0;
        });
        $this->snData = array_values($this->snData);
        return $this->snData;
    }

    public function cleanAllData() {
        $this->cleanDceData();
        $this->cleanArgosData();
        $this->cleanSnData();
        return $this;
    }
}
?>
============
<?php
session_start();

require_once "ExcelComparisonTool.php";

define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASS', '');
define('DB_NAME', 'compliance_db');

function connectToDatabase() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASS);
    if ($conn->connect_error) {
        throw new Exception("Database connection failed: " . $conn->connect_error);
    }
    $conn->select_db(DB_NAME);
    return $conn;
}

// Create background job in database
function createBackgroundJob($sessionId) {
    try {
        $conn = connectToDatabase();
        $jobId = uniqid('job_', true);
        
        $stmt = $conn->prepare("INSERT INTO background_jobs (job_id, status, session_id) VALUES (?, 'pending', ?)");
        $stmt->bind_param("ss", $jobId, $sessionId);
        $stmt->execute();
        $stmt->close();
        
        // Create cancel flag entry
        $stmt = $conn->prepare("INSERT INTO job_cancel_flags (job_id, cancel_requested) VALUES (?, FALSE)");
        $stmt->bind_param("s", $jobId);
        $stmt->execute();
        $stmt->close();
        
        $conn->close();
        return $jobId;
    } catch (Exception $e) {
        error_log("Failed to create job: " . $e->getMessage());
        return false;
    }
}

// Start background processing
function startBackgroundProcessing($jobId, $sessionId) {
    $phpPath = PHP_BINARY;
    $scriptPath = __DIR__ . '/background_processor.php';
    $logPath = __DIR__ . '/logs/job_' . $jobId . '.log';
    
    // Create logs directory if it doesn't exist
    if (!is_dir(__DIR__ . '/logs')) {
        mkdir(__DIR__ . '/logs', 0777, true);
    }
    
    // Build command for background execution
    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
        // Windows
        $command = sprintf(
            'start /B "" "%s" "%s" %s %s > "%s" 2>&1',
            $phpPath,
            $scriptPath,
            escapeshellarg($jobId),
            escapeshellarg($sessionId),
            $logPath
        );
    } else {
        // Linux/Unix
        $command = sprintf(
            '"%s" "%s" %s %s > "%s" 2>&1 &',
            $phpPath,
            $scriptPath,
            escapeshellarg($jobId),
            escapeshellarg($sessionId),
            $logPath
        );
    }
    
    exec($command);
    return true;
}

// Get job status
function getJobStatus($jobId) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("SELECT status, progress, error_message, updated_at FROM background_jobs WHERE job_id = ?");
        $stmt->bind_param("s", $jobId);
        $stmt->execute();
        $stmt->bind_result($status, $progress, $errorMessage, $updatedAt);
        
        if ($stmt->fetch()) {
            $result = [
                'status' => $status,
                'progress' => $progress,
                'error_message' => $errorMessage,
                'updated_at' => $updatedAt
            ];
            $stmt->close();
            $conn->close();
            return $result;
        }
        
        $stmt->close();
        $conn->close();
        return null;
    } catch (Exception $e) {
        error_log("Failed to get job status: " . $e->getMessage());
        return null;
    }
}

// Cancel a job
function cancelJob($jobId) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("UPDATE job_cancel_flags SET cancel_requested = TRUE WHERE job_id = ?");
        $stmt->bind_param("s", $jobId);
        $stmt->execute();
        $stmt->close();
        $conn->close();
        return true;
    } catch (Exception $e) {
        error_log("Failed to cancel job: " . $e->getMessage());
        return false;
    }
}

function storeCsvDataToDatabase($csvData, $tableName, $sessionId, $fieldMapping) {
    try {
        $conn = connectToDatabase();

        switch ($tableName) {
            case 'dce_data':
                $sql = "INSERT INTO dce_data (session_id, hostname, useruid, sn_number, livedate, userwhen) VALUES (?, ?, ?, ?, ?, ?)";
                break;
            case 'argos_data':
                $sql = "INSERT INTO argos_data (session_id, hostname, owner, serial_number, state) VALUES (?, ?, ?, ?, ?)";
                break;
            case 'sn_data':
                $sql = "INSERT INTO sn_data (session_id, serial_number, State, pending_collection) VALUES (?, ?, ?, ?)";
                break;
            default:
                throw new Exception("Unknown table name: $tableName");
        }

        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            throw new Exception("Prepare statement failed: " . $conn->error);
        }

        foreach ($csvData as $row) {
            $param1 = $sessionId;
            $param2 = $param3 = $param4 = $param5 = $param6 = '';

            switch ($tableName) {
                case 'dce_data':
                    $param2 = $row[$fieldMapping['hostname']] ?? '';
                    $param3 = $row[$fieldMapping['useruid']] ?? '';
                    $param4 = $row[$fieldMapping['sn_number']] ?? '';
                    $param5 = $row[$fieldMapping['livedate']] ?? '';
                    $param6 = $row[$fieldMapping['userwhen']] ?? '';
                    $stmt->bind_param("ssssss", $param1, $param2, $param3, $param4, $param5, $param6);
                    break;
                case 'argos_data':
                    $param2 = $row[$fieldMapping['hostname']] ?? '';
                    $param3 = $row[$fieldMapping['owner']] ?? '';
                    $param4 = $row[$fieldMapping['serial_number']] ?? '';
                    $param5 = $row[$fieldMapping['state']] ?? '';
                    $stmt->bind_param("sssss", $param1, $param2, $param3, $param4, $param5);
                    break;
                case 'sn_data':
                    $param2 = $row[$fieldMapping['serial_number']] ?? '';
                    $param3 = $row[$fieldMapping['State']] ?? '';
                    $param4 = $row[$fieldMapping['pending_collection']] ?? '';
                    $stmt->bind_param("ssss", $param1, $param2, $param3, $param4);
                    break;
            }

            if (!$stmt->execute()) {
                error_log("Failed to insert row: " . $stmt->error);
            }
        }

        $stmt->close();
        $conn->close();
        return true;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}

function loadCsvDataFromDatabase($tableName, $sessionId) {
    try {
        $conn = connectToDatabase();

        switch ($tableName) {
            case 'dce_data':
                $sql = "SELECT hostname, useruid, sn_number as 'serial', livedate, userwhen FROM dce_data WHERE session_id = ?";
                break;
            case 'argos_data':
                $sql = "SELECT hostname, owner, serial_number as 'serial#', state FROM argos_data WHERE session_id = ?";
                break;
            case 'sn_data':
                $sql = "SELECT serial_number as 'Serial number', State, pending_collection as 'Pending collection [Hardware]' FROM sn_data WHERE session_id = ?";
                break;
            default:
                throw new Exception("Unknown table name: $tableName");
        }

        $stmt = $conn->prepare($sql);
        $stmt->bind_param("s", $sessionId);
        $stmt->execute();
        $result = $stmt->get_result();

        $data = [];
        while ($row = $result->fetch_assoc()) {
            $data[] = $row;
        }

        $stmt->close();
        $conn->close();
        return $data;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return [];
    }
}

function getComparisonResults($sessionId) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("SELECT result_data FROM temp_comparison_results WHERE session_id = ?");
        $stmt->bind_param("s", $sessionId);
        $stmt->execute();
        $stmt->bind_result($resultData);

        if ($stmt->fetch()) {
            $results = json_decode($resultData, true);
            $stmt->close();
            $conn->close();
            return $results;
        }

        $stmt->close();
        $conn->close();
        return null;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return null;
    }
}

function cleanupOldResults($hoursOld = 24) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("DELETE FROM temp_comparison_results WHERE created_at < DATE_SUB(NOW(), INTERVAL ? HOUR)");
        $stmt->bind_param("i", $hoursOld);
        $stmt->execute();
        $stmt->close();
        $conn->close();
    } catch (Exception $e) {
        error_log("Database error during cleanup: " . $e->getMessage());
    }
}

function cleanupOldCsvData($hoursOld = 24) {
    try {
        $conn = connectToDatabase();
        $tables = ['dce_data', 'argos_data', 'sn_data'];
        foreach ($tables as $table) {
            $stmt = $conn->prepare("DELETE FROM $table WHERE created_at < DATE_SUB(NOW(), INTERVAL ? HOUR)");
            $stmt->bind_param("i", $hoursOld);
            $stmt->execute();
            $stmt->close();
        }
        $conn->close();
    } catch (Exception $e) {
        error_log("Database error during CSV data cleanup: " . $e->getMessage());
    }
}

function getComplianceRecords() {
    try {
        $conn = connectToDatabase();
        $result = $conn->query("SELECT * FROM compliance_results ORDER BY created_at DESC LIMIT 100");
        $records = [];
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                $records[] = $row;
            }
        }
        $conn->close();
        return $records;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return [];
    }
}

// Handle AJAX requests for job status
if (isset($_GET['ajax']) && $_GET['ajax'] === 'job_status' && isset($_GET['job_id'])) {
    header('Content-Type: application/json');
    $status = getJobStatus($_GET['job_id']);
    echo json_encode($status);
    exit;
}

// Handle job cancellation
if (isset($_POST['cancel_job']) && isset($_POST['job_id'])) {
    header('Content-Type: application/json');
    $result = cancelJob($_POST['job_id']);
    echo json_encode(['success' => $result]);
    exit;
}

// Handle export logic
try {
    if (isset($_GET['export']) && $_GET['export'] === 'non_compliant' && isset($_GET['session_id'])) {
        $comparisonResults = getComparisonResults($_GET['session_id']);

        if (!$comparisonResults) {
            throw new Exception("No comparison results found. Please upload files first.");
        }

        $comparator = new ExcelComparisonTool();
        $exportedFile = $comparator
            ->setComparisonResults($comparisonResults)
            ->exportNonCompliantResults();

        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment; filename="' . basename($exportedFile) . '"');
        header('Content-Length: ' . filesize($exportedFile));
        readfile($exportedFile);
        exit;
    }
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
    exit;
}

// Main execution
try {
    $comparisonResults = [];
    $nonCompliantResults = [];
    $sessionId = isset($_GET['session_id']) ? $_GET['session_id'] : null;
    $jobId = isset($_GET['job_id']) ? $_GET['job_id'] : null;

    cleanupOldResults(24);
    cleanupOldCsvData(24);

    // Check if we're viewing a job in progress
    if ($jobId) {
        $jobStatus = getJobStatus($jobId);
        if ($jobStatus && $jobStatus['status'] === 'completed') {
            // Job completed, get results and redirect to results page
            $comparisonResults = getComparisonResults($jobId);
            if ($comparisonResults) {
                $nonCompliantResults = array_filter($comparisonResults, function($result) {
                    return $result['compliance_status'] === 'non-compliant';
                });
            }
        }
    } else if ($sessionId) {
        $comparisonResults = getComparisonResults($sessionId);
        if (!$comparisonResults) {
            echo "<div style='color:red;margin:10px 0;'>Session expired or invalid. Please upload files again.</div>";
            $comparisonResults = [];
        } else {
            $nonCompliantResults = array_filter($comparisonResults, function($result) {
                return $result['compliance_status'] === 'non-compliant';
            });
        }
    } else if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['dce_file'])) {
        if (isset($_SESSION['comparison_results'])) {
            unset($_SESSION['comparison_results']);
        }

        // Generate unique session ID
        $sessionId = uniqid('upload_', true);

        // Upload and store CSV files
        $dceFile = $_FILES['dce_file']['tmp_name'];
        $dceData = [];
        if (($handle = fopen($dceFile, "r")) !== FALSE) {
            $headers = fgetcsv($handle);
            while (($row = fgetcsv($handle)) !== FALSE) {
                if (count($row) == count($headers)) {
                    $dceData[] = array_combine($headers, $row);
                }
            }
            fclose($handle);
        }

        $dceFieldMapping = [
            'hostname' => 'hostname',
            'useruid' => 'useruid',
            'sn_number' => 'serial',
            'livedate' => 'livedate',
            'userwhen' => 'userwhen'
        ];
        storeCsvDataToDatabase($dceData, 'dce_data', $sessionId, $dceFieldMapping);

        $argosFile = $_FILES['argos_file']['tmp_name'];
        $argosData = [];
        if (($handle = fopen($argosFile, "r")) !== FALSE) {
            $headers = fgetcsv($handle);
            while (($row = fgetcsv($handle)) !== FALSE) {
                if (count($row) == count($headers)) {
                    $argosData[] = array_combine($headers, $row);
                }
            }
            fclose($handle);
        }

        $argosFieldMapping = [
            'hostname' => 'Hostname',
            'owner' => 'Owner',
            'serial_number' => 'Serial #',
            'state' => 'State'
        ];
        storeCsvDataToDatabase($argosData, 'argos_data', $sessionId, $argosFieldMapping);

        $snFile = $_FILES['sn_file']['tmp_name'];
        $snData = [];
        if (($handle = fopen($snFile, "r")) !== FALSE) {
            $headers = fgetcsv($handle);
            while (($row = fgetcsv($handle)) !== FALSE) {
                if (count($row) == count($headers)) {
                    $snData[] = array_combine($headers, $row);
                }
            }
            fclose($handle);
        }

        $snFieldMapping = [
            'serial_number' => 'Serial number',
            'State' => 'State',
            'pending_collection' => 'Pending collection [Hardware]'
        ];
        storeCsvDataToDatabase($snData, 'sn_data', $sessionId, $snFieldMapping);

        // Create background job
        $jobId = createBackgroundJob($sessionId);
        if (!$jobId) {
            throw new Exception("Failed to create background job");
        }

        // Start background processing
        startBackgroundProcessing($jobId, $sessionId);

        // Redirect to job status page
        header("Location: test11.php?job_id=" . $jobId);
        exit;
    }
} catch (Exception $e) {
    die("Upload error: " . $e->getMessage());
}

$dbRecords = [];
if (isset($_GET['view']) && $_GET['view'] === 'records') {
    $dbRecords = getComplianceRecords();
}

$nonCompliantResults = [];
if (!empty($comparisonResults)) {
    $nonCompliantResults = array_filter($comparisonResults, function($result) {
        return $result['compliance_status'] === 'non-compliant';
    });
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Compare results</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1800px;
            margin: 0 auto;
            padding: 20px;
        }
        .result-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }
        .result-table th, .result-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .compliant { background-color: #dff0d8; }
        .non-compliant { background-color: #f2dede; }
        .action-btns {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
            flex-wrap: wrap;
            gap: 10px;
        }
        .return-btn, .export-btn, .records-btn, .non-compliant-btn, .cancel-btn {
            display: block;
            width: 190px;
            padding: 10px;
            background-color: #007bff;
            color: white;
            text-align: center;
            text-decoration: none;
            border-radius: 5px;
            border: none;
            cursor: pointer;
        }
        .export-btn { background-color: #28a745; }
        .records-btn { background-color: #6c757d; }
        .non-compliant-btn { background-color: #dc3545; }
        .cancel-btn { background-color: #dc3545; }
        .tabs {
            margin-bottom: 20px;
        }
        .tabs a {
            display: inline-block;
            padding: 10px 20px;
            text-decoration: none;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 5px 5px 0 0;
            margin-right: 5px;
        }
        .tabs a.active {
            background-color: #f0f0f0;
            border-bottom: 1px solid white;
        }
        .progress-container {
            width: 100%;
            background-color: #f0f0f0;
            border-radius: 10px;
            margin: 20px 0;
            padding: 5px;
        }
        .progress-bar {
            height: 30px;
            background-color: #4CAF50;
            border-radius: 8px;
            text-align: center;
            line-height: 30px;
            color: white;
            transition: width 0.3s ease;
        }
        .job-status {
            padding: 15px;
            margin: 20px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .status-running { border-left: 5px solid #ffc107; }
        .status-completed { border-left: 5px solid #28a745; }
        .status-failed { border-left: 5px solid #dc3545; }
        .status-cancelled { border-left: 5px solid #6c757d; }
    </style>
</head>
<body>

<?php if ($jobId && !empty($jobStatus)): ?>
    <!-- Job Status View -->
    <div class="job-status status-<?= $jobStatus['status'] ?>">
        <h2>Processing Job: <?= htmlspecialchars($jobId) ?></h2>
        <p><strong>Status:</strong> <?= htmlspecialchars($jobStatus['status']) ?></p>
        
        <?php if ($jobStatus['status'] === 'running' || $jobStatus['status'] === 'pending'): ?>
            <div class="progress-container">
                <div class="progress-bar" id="progressBar" style="width: <?= $jobStatus['progress'] ?>%">
                    <?= $jobStatus['progress'] ?>%
                </div>
            </div>
            <button class="cancel-btn" onclick="cancelJob('<?= $jobId ?>')">Cancel Job</button>
            <p>Please wait while we process your files...</p>
            
            <script>
                function updateProgress() {
                    fetch('?ajax=job_status&job_id=<?= $jobId ?>')
                        .then(response => response.json())
                        .then(data => {
                            if (data) {
                                document.getElementById('progressBar').style.width = data.progress + '%';
                                document.getElementById('progressBar').textContent = data.progress + '%';
                                
                                if (data.status === 'completed') {
                                    window.location.href = '?session_id=<?= $jobId ?>';
                                } else if (data.status === 'failed') {
                                    alert('Job failed: ' + data.error_message);
                                    window.location.href = 'index.html';
                                } else if (data.status === 'cancelled') {
                                    alert('Job was cancelled');
                                    window.location.href = 'index.html';
                                } else {
                                    setTimeout(updateProgress, 2000);
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching job status:', error);
                            setTimeout(updateProgress, 2000);
                        });
                }
                
                function cancelJob(jobId) {
                    if (confirm('Are you sure you want to cancel this job?')) {
                        const formData = new FormData();
                        formData.append('cancel_job', '1');
                        formData.append('job_id', jobId);
                        
                        fetch('', {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert('Job cancellation requested');
                                window.location.href = 'index.html';
                            }
                        });
                    }
                }
                
                setTimeout(updateProgress, 2000);
            </script>
        <?php elseif ($jobStatus['status'] === 'failed'): ?>
            <p style="color: red;"><strong>Error:</strong> <?= htmlspecialchars($jobStatus['error_message']) ?></p>
            <a href="index.html" class="return-btn">Return to Upload Page</a>
        <?php elseif ($jobStatus['status'] === 'cancelled'): ?>
            <p>Job was cancelled.</p>
            <a href="index.html" class="return-btn">Return to Upload Page</a>
        <?php endif; ?>
    </div>

<?php elseif (isset($_GET['view']) && $_GET['view'] === 'records'): ?>
    <!-- Database Records View -->
    <h3>Database Records</h3>
    <div class="action-btns">
        <?php if (isset($sessionId) && $sessionId): ?>
            <a href="test11.php?session_id=<?= $sessionId ?>" class="return-btn">Back to All Results</a>
        <?php else: ?>
            <a href="test11.php" class="return-btn">Back to Upload</a>
        <?php endif; ?>
    </div>
    <div class="tabs">
        <?php if (isset($sessionId) && $sessionId): ?>
            <a href="test11.php?session_id=<?= $sessionId ?>">All Results</a>
            <a href="?view=non_compliant&session_id=<?= $sessionId ?>">Non-Compliant Results</a>
        <?php else: ?>
            <a href="test11.php">All Results</a>
            <a href="?view=non_compliant">Non-Compliant Results</a>
        <?php endif; ?>
        <a href="?view=records" class="active">Database Records</a>
    </div>
    <p>Database has: <?= count($dbRecords) ?> records</p>
    <table class="result-table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Hostname</th>
            <th>DCE UID</th>
            <th>AGROS UID</th>
            <th>DCE Serial#</th>
            <th>SN Serial Number</th>
            <th>AGROS Serial#</th>
            <th>DCE Livedate</th>
            <th>DCE Userwhen</th>
            <th>Created At</th>
        </tr>
        </thead>
        <tbody>
        <?php foreach($dbRecords as $record): ?>
            <tr class="<?= $record['compliance_status'] ?>">
                <td><?= htmlspecialchars($record['id']) ?></td>
                <td><?= htmlspecialchars($record['hostname']) ?></td>
                <td><?= htmlspecialchars($record['dce_useruid']) ?></td>
                <td><?= htmlspecialchars($record['argos_owner']) ?></td>
                <td><?= htmlspecialchars($record['dce_sn']) ?></td>
                <td><?= htmlspecialchars($record['argos_serial']) ?></td>
                <td><?= htmlspecialchars($record['sn_serial']) ?></td>
                <td><?= htmlspecialchars($record['dce_livedate']) ?></td>
                <td><?= htmlspecialchars($record['dce_userwhen']) ?></td>
                <td><?= $record['created_at'] ?></td>
            </tr>
        <?php endforeach; ?>
        </tbody>
    </table>

<?php elseif (isset($_GET['view']) && $_GET['view'] === 'non_compliant'): ?>
    <!-- Non-Compliant Results View -->
    <h3>Non-Compliant Results</h3>
    <div class="action-btns">
        <a href="test11.php?session_id=<?= $sessionId ?>" class="return-btn">Back to All Results</a>
        <?php if (isset($sessionId) && $sessionId): ?>
            <a href="?export=non_compliant&session_id=<?= $sessionId ?>" class="export-btn">Export Results</a>
        <?php endif; ?>
    </div>
    <div class="tabs">
        <a href="test11.php?session_id=<?= $sessionId ?>">All Results</a>
        <a href="?view=non_compliant&session_id=<?= $sessionId ?>" class="active">Non-Compliant Results</a>
        <a href="?view=records<?= isset($sessionId) ? '&session_id='.$sessionId : '' ?>">Database Records</a>
    </div>
    <p>This run finds: <?= count($nonCompliantResults) ?> non-compliant records</p>
    <table class="result-table">
        <thead>
        <tr>
            <th>Hostname</th>
            <th>DCE UID</th>
            <th>AGROS UID</th>
            <th>DCE Serial#</th>
            <th>AGROS Serial#</th>
            <th>SN Serial Number</th>
            <th>DCE Livedate</th>
            <th>DCE Userwhen</th>
        </tr>
        </thead>
        <tbody>
        <?php foreach($nonCompliantResults as $result): ?>
            <tr class="non-compliant">
                <td><?= htmlspecialchars($result['hostname']) ?></td>
                <td><?= htmlspecialchars($result['dce_useruid']) ?></td>
                <td><?= htmlspecialchars($result['argos_owner']) ?></td>
                <td><?= htmlspecialchars($result['dce_sn']) ?></td>
                <td><?= htmlspecialchars($result['argos_serial']) ?></td>
                <td><?= htmlspecialchars($result['sn_serial']) ?></td>
                <td><?= htmlspecialchars($result['dce_livedate']) ?></td>
                <td><?= htmlspecialchars($result['dce_userwhen']) ?></td>
            </tr>
        <?php endforeach; ?>
        </tbody>
    </table>

<?php else: ?>
    <!-- All Results View (Default) -->
    <div class="action-btns">
        <a href="index.html" class="return-btn">Return to upload page</a>
        <?php if (isset($sessionId) && $sessionId): ?>
            <a href="?export=non_compliant&session_id=<?= $sessionId ?>" class="export-btn">Export Results</a>
        <?php endif; ?>
    </div>
    <div class="tabs">
        <a href="test11.php?session_id=<?= $sessionId ?>" class="active">All Results</a>
        <a href="?view=non_compliant&session_id=<?= $sessionId ?>">Non-Compliant Results</a>
        <a href="?view=records<?= isset($sessionId) ? '&session_id='.$sessionId : '' ?>">Database Records</a>
    </div>
    <p>This run returns: <?= count($comparisonResults) ?> records in total</p>
    <table class="result-table">
        <thead>
        <tr>
            <th>Hostname</th>
            <th>DCE UID</th>
            <th>AGROS UID</th>
            <th>DCE Serial#</th>
            <th>AGROS Serial#</th>
            <th>SN Serial Number</th>
            <th>DCE Livedate</th>
            <th>DCE Userwhen</th>
            <th>DCE status</th>
            <th>AGROS State</th>
            <th>SN State</th>
            <th>SN Pending collection</th>
            <th>Compliance status</th>
            <th>Reason</th>
        </tr>
        </thead>
        <tbody>
        <?php foreach($comparisonResults as $result): ?>
            <tr class="<?= $result['compliance_status'] ?>">
                <td><?= htmlspecialchars($result['hostname']) ?></td>
                <td><?= htmlspecialchars($result['dce_useruid']) ?></td>
                <td><?= htmlspecialchars($result['argos_owner']) ?></td>
                <td><?= htmlspecialchars($result['dce_sn']) ?></td>
                <td><?= htmlspecialchars($result['argos_serial']) ?></td>
                <td><?= htmlspecialchars($result['sn_serial']) ?></td>
                <td><?= htmlspecialchars($result['dce_livedate']) ?></td>
                <td><?= htmlspecialchars($result['dce_userwhen']) ?></td>
                <td><?= htmlspecialchars($result['dce_status']) ?></td>
                <td><?= htmlspecialchars($result['argos_state']) ?></td>
                <td><?= htmlspecialchars($result['sn_state']) ?></td>
                <td><?= htmlspecialchars($result['sn_pending_collection']) ?></td>
                <td><?= $result['compliance_status'] ?></td>
                <td><?= htmlspecialchars($result['compliance_reason']) ?></td>
            </tr>
        <?php endforeach; ?>
        </tbody>
    </table>
<?php endif; ?>

</body>
</html>
===============
# Asynchronous Background Processing Setup Guide

## Overview
This implementation converts your compliance checking tool to run asynchronously in the background with real-time progress tracking and job cancellation support.

## Key Features
- ✅ Background processing using PHP exec/shell_exec
- ✅ Real-time progress updates via AJAX
- ✅ Job cancellation support
- ✅ Database-based job control
- ✅ Works with PHP-FPM (non-CLI)
- ✅ No third-party libraries required

## Files Structure

```
your-project/
├── index.html                    # Upload form (unchanged)
├── test11.php                    # Main file (async version)
├── background_processor.php      # Background worker script
├── ExcelComparisonTool.php      # Updated comparison tool
├── logs/                         # Auto-created for job logs
└── exports/                      # Auto-created for exports
```

## Installation Steps

### 1. Create Database Tables

Run this SQL to create the required tables:

```sql
-- Background jobs tracking table
CREATE TABLE IF NOT EXISTS background_jobs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    job_id VARCHAR(50) UNIQUE NOT NULL,
    status ENUM('pending', 'running', 'completed', 'cancelled', 'failed') DEFAULT 'pending',
    progress INT DEFAULT 0,
    total_records INT DEFAULT 0,
    session_id VARCHAR(50),
    error_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_job_id (job_id),
    INDEX idx_status (status),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Job cancellation flags table
CREATE TABLE IF NOT EXISTS job_cancel_flags (
    job_id VARCHAR(50) PRIMARY KEY,
    cancel_requested BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_cancel_requested (cancel_requested)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
```

### 2. Set File Permissions

Ensure your web server can execute PHP scripts and write to directories:

```bash
# Linux/Unix
chmod +x background_processor.php
chmod 755 logs/
chmod 755 exports/

# Or create directories if they don't exist
mkdir -p logs exports
chmod 755 logs exports
```

### 3. Configure PHP Settings

Check your `php.ini` or create a `.htaccess` file:

```ini
max_execution_time = 300
memory_limit = 512M
upload_max_filesize = 50M
post_max_size = 50M
```

### 4. Verify PHP Binary Path

The script uses `PHP_BINARY` constant. Verify it works:

```php
<?php
echo PHP_BINARY;
// Should output something like: /usr/bin/php
?>
```

If it doesn't work, manually set the path in `test11.php`:

```php
// Replace this line in startBackgroundProcessing()
$phpPath = '/usr/bin/php'; // Your actual PHP path
```

## How It Works

### Workflow

1. **User uploads files** → `test11.php` receives files
2. **Files stored in database** → Data saved to `dce_data`, `argos_data`, `sn_data` tables
3. **Background job created** → Entry in `background_jobs` table with unique `job_id`
4. **Background process spawned** → `background_processor.php` runs via exec()
5. **Real-time progress** → AJAX polls job status every 2 seconds
6. **Job completion** → Results stored and user redirected to results page

### Job States

- **pending**: Job created but not started yet
- **running**: Job is currently processing
- **completed**: Job finished successfully
- **cancelled**: User cancelled the job
- **failed**: Job encountered an error

### Cancellation Mechanism

When a user clicks "Cancel Job":
1. Flag set in `job_cancel_flags` table
2. Background processor checks flag between batches
3. If flag is true, processor stops and updates status to 'cancelled'
4. All intermediate data is preserved

## Usage

### Normal Operation

1. Upload files via `index.html`
2. Monitor progress on job status page
3. View results when complete

### Cancelling a Job

1. Click "Cancel Job" button on progress page
2. Confirm cancellation
3. Background process will stop at next checkpoint
4. You'll be redirected to upload page

### Checking Old Jobs

Jobs and their results are kept for 24 hours by default. To change retention:

```php
// In test11.php, modify these calls:
cleanupOldResults(48);    // Keep for 48 hours
cleanupOldCsvData(48);    // Keep for 48 hours
```

## Troubleshooting

### Background Process Not Starting

**Problem**: Job stays in "pending" status

**Solutions**:
1. Check PHP binary path is correct
2. Verify file permissions on `background_processor.php`
3. Check server error logs
4. Test command manually:
   ```bash
   php background_processor.php "test_job_id" "test_session_id"
   ```

### Progress Not Updating

**Problem**: Progress bar stuck at 0%

**Solutions**:
1. Check browser console for JavaScript errors
2. Verify AJAX endpoint is accessible: `test11.php?ajax=job_status&job_id=YOUR_JOB_ID`
3. Check if `background_processor.php` is actually running:
   ```bash
   ps aux | grep background_processor
   ```

### Cancellation Not Working

**Problem**: Cancel button doesn't stop the job

**Solutions**:
1. Verify `job_cancel_flags` table exists
2. Check database permissions for UPDATE operations
3. Ensure background process is checking cancellation flag (should check every batch)

### Memory Issues

**Problem**: Process fails with memory errors

**Solutions**:
1. Increase PHP memory limit in php.ini
2. Reduce batch size in `compareDataWithCancellation()`:
   ```php
   // In ExcelComparisonTool.php
   $results = $comparator->compareDataWithCancellation($jobId, $progressCallback, 500); // Reduced from 1000
   ```

### Permission Denied Errors

**Problem**: Cannot write to logs or execute scripts

**Solutions**:
```bash
# Linux/Unix
chown -R www-data:www-data /path/to/your/project
chmod -R 755 /path/to/your/project
chmod +x background_processor.php
```

## Performance Tuning

### Large Datasets

For datasets with 10,000+ records:

1. **Adjust batch size**:
   ```php
   // In background_processor.php
   $results = $comparator->compareDataWithCancellation($jobId, function($progress) use ($jobId) {
       updateJobStatus($jobId, 'running', 50 + ($progress * 0.4));
   }, 500); // Smaller batches = more frequent cancellation checks
   ```

2. **Increase PHP limits**:
   ```ini
   max_execution_time = 600
   memory_limit = 1024M
   ```

3. **Enable garbage collection**:
   The code already includes `gc_collect_cycles()` after each batch

## Security Considerations

1. **Input Validation**: Always validate file uploads
2. **SQL Injection**: Code uses prepared statements (✓)
3. **File Access**: Restrict access to sensitive directories
4. **Job ID Security**: Job IDs use `uniqid()` with entropy (✓)

## Monitoring

### View Active Jobs

```sql
SELECT job_id, status, progress, created_at, updated_at 
FROM background_jobs 
WHERE status IN ('pending', 'running')
ORDER BY created_at DESC;
```

### View Failed Jobs

```sql
SELECT job_id, error_message, created_at 
FROM background_jobs 
WHERE status = 'failed'
ORDER BY created_at DESC
LIMIT 10;
```

### Clean Up Old Jobs

```sql
-- Manual cleanup (older than 7 days)
DELETE FROM background_jobs WHERE created_at < DATE_SUB(NOW(), INTERVAL 7 DAY);
DELETE FROM job_cancel_flags WHERE created_at < DATE_SUB(NOW(), INTERVAL 7 DAY);
DELETE FROM temp_comparison_results WHERE created_at < DATE_SUB(NOW(), INTERVAL 7 DAY);
```

## Advanced Configuration

### Custom Progress Updates

Modify progress callback in `background_processor.php`:

```php
$results = $comparator->compareDataWithCancellation($jobId, function($progress) use ($jobId) {
    // Custom progress calculation
    $totalProgress = 50 + ($progress * 0.4); // 50-90% range
    updateJobStatus($jobId, 'running', $totalProgress);
    
    // Optional: Log progress
    error_log("Job $jobId progress: $totalProgress%");
}, 1000);
```

### Email Notifications

Add to `background_processor.php` after completion:

```php
if ($jobStatus['status'] === 'completed') {
    mail('admin@example.com', 'Job Completed', "Job $jobId completed successfully");
}
```

## FAQ

**Q: Can multiple jobs run simultaneously?**
A: Yes, each job runs as a separate process.

**Q: What happens if the server restarts?**
A: Running jobs will be marked as "running" but won't continue. You'll need to manually clean them up or implement a recovery mechanism.

**Q: How do I increase polling frequency?**
A: In `test11.php`, change `setTimeout(updateProgress, 2000)` to a lower value (in milliseconds).

**Q: Can I see the background process output?**
A: Yes, check the log files in the `logs/` directory: `job_[JOB_ID].log`

## Support

If you encounter issues:
1. Check PHP error logs
2. Check web server error logs (Apache/Nginx)
3. Check job-specific logs in `logs/` directory
4. Enable PHP error display for debugging (development only)
