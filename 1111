<?php
// ===============================
// 1. 首先创建任务状态表
// ===============================

function createTaskStatusTable() {
    try {
        $conn = connectToDatabase();
        
        $sql = "CREATE TABLE IF NOT EXISTS task_status (
            id INT AUTO_INCREMENT PRIMARY KEY,
            task_id VARCHAR(50) UNIQUE NOT NULL,
            status ENUM('pending', 'processing', 'completed', 'cancelled', 'error') DEFAULT 'pending',
            progress INT DEFAULT 0,
            message TEXT,
            session_id VARCHAR(50),
            final_session_id VARCHAR(50),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            INDEX idx_task_id (task_id),
            INDEX idx_status (status)
        )";
        
        $conn->query($sql);
        $conn->close();
        return true;
    } catch (Exception $e) {
        error_log("Error creating task status table: " . $e->getMessage());
        return false;
    }
}

// ===============================
// 2. 任务状态管理函数
// ===============================

function updateTaskStatus($task_id, $status, $progress = null, $message = null, $final_session_id = null) {
    try {
        $conn = connectToDatabase();
        
        $sql = "UPDATE task_status SET status = ?, updated_at = NOW()";
        $params = [$status];
        $types = "s";
        
        if ($progress !== null) {
            $sql .= ", progress = ?";
            $params[] = $progress;
            $types .= "i";
        }
        
        if ($message !== null) {
            $sql .= ", message = ?";
            $params[] = $message;
            $types .= "s";
        }
        
        if ($final_session_id !== null) {
            $sql .= ", final_session_id = ?";
            $params[] = $final_session_id;
            $types .= "s";
        }
        
        $sql .= " WHERE task_id = ?";
        $params[] = $task_id;
        $types .= "s";
        
        $stmt = $conn->prepare($sql);
        $stmt->bind_param($types, ...$params);
        $stmt->execute();
        $stmt->close();
        $conn->close();
        
        return true;
    } catch (Exception $e) {
        error_log("Error updating task status: " . $e->getMessage());
        return false;
    }
}

function getTaskStatus($task_id) {
    try {
        $conn = connectToDatabase();
        
        $stmt = $conn->prepare("SELECT * FROM task_status WHERE task_id = ?");
        $stmt->bind_param("s", $task_id);
        $stmt->execute();
        $result = $stmt->get_result();
        
        $status = null;
        if ($result->num_rows > 0) {
            $status = $result->fetch_assoc();
        }
        
        $stmt->close();
        $conn->close();
        return $status;
    } catch (Exception $e) {
        error_log("Error getting task status: " . $e->getMessage());
        return null;
    }
}

function createTask($task_id, $session_id) {
    try {
        $conn = connectToDatabase();
        
        $stmt = $conn->prepare("INSERT INTO task_status (task_id, session_id, status, progress, message) VALUES (?, ?, 'pending', 0, '准备开始处理...')");
        $stmt->bind_param("ss", $task_id, $session_id);
        $stmt->execute();
        $stmt->close();
        $conn->close();
        
        return true;
    } catch (Exception $e) {
        error_log("Error creating task: " . $e->getMessage());
        return false;
    }
}

function cancelTask($task_id) {
    return updateTaskStatus($task_id, 'cancelled', null, '处理已被用户取消');
}

function isTaskCancelled($task_id) {
    $status = getTaskStatus($task_id);
    return $status && $status['status'] === 'cancelled';
}

// ===============================
// 3. 异步处理脚本 (async_processor.php)
// ===============================

class DatabaseAsyncProcessor {
    private $task_id;
    private $session_id;
    
    public function __construct($task_id) {
        $this->task_id = $task_id;
        $task_status = getTaskStatus($task_id);
        if (!$task_status) {
            throw new Exception("Task not found: $task_id");
        }
        $this->session_id = $task_status['session_id'];
    }
    
    public function process() {
        try {
            updateTaskStatus($this->task_id, 'processing', 5, '开始处理数据...');
            
            // 检查取消状态
            if (isTaskCancelled($this->task_id)) {
                $this->cleanup();
                return;
            }
            
            updateTaskStatus($this->task_id, 'processing', 20, '加载DCE数据...');
            
            $comparator = new ExcelComparisonToolWithDatabaseCancel();
            $comparator->setSessionId($this->session_id);
            
            // 检查取消状态
            if (isTaskCancelled($this->task_id)) {
                $this->cleanup();
                return;
            }
            
            updateTaskStatus($this->task_id, 'processing', 40, '加载ARGOS数据...');
            
            // 从数据库加载数据
            $comparator->importDceFile();
            
            if (isTaskCancelled($this->task_id)) {
                $this->cleanup();
                return;
            }
            
            updateTaskStatus($this->task_id, 'processing', 60, '加载SN数据...');
            
            $comparator->importArgosFile();
            $comparator->importSnFile();
            
            if (isTaskCancelled($this->task_id)) {
                $this->cleanup();
                return;
            }
            
            updateTaskStatus($this->task_id, 'processing', 70, '清理数据...');
            
            // 清理数据
            $comparator->cleanAllData();
            
            if (isTaskCancelled($this->task_id)) {
                $this->cleanup();
                return;
            }
            
            updateTaskStatus($this->task_id, 'processing', 80, '开始数据比较分析...');
            
            // 执行比较 - 带取消检查
            $results = $comparator->compareDataWithDatabaseCancelCheck($this->task_id);
            
            if ($results === false) {
                // 比较过程中被取消
                $this->cleanup();
                return;
            }
            
            if (isTaskCancelled($this->task_id)) {
                $this->cleanup();
                return;
            }
            
            updateTaskStatus($this->task_id, 'processing', 95, '保存比较结果...');
            
            // 保存结果
            saveResultsToDatabase($results);
            $final_session_id = storeComparisonResults($results);
            
            // 完成
            updateTaskStatus($this->task_id, 'completed', 100, '处理完成！', $final_session_id);
            
        } catch (Exception $e) {
            updateTaskStatus($this->task_id, 'error', 0, '处理出错: ' . $e->getMessage());
            $this->cleanup();
        }
    }
    
    private function cleanup() {
        // 清理相关的临时数据
        try {
            $conn = connectToDatabase();
            
            // 清理临时的CSV数据
            $tables = ['dce_data', 'argos_data', 'sn_data'];
            foreach ($tables as $table) {
                $stmt = $conn->prepare("DELETE FROM $table WHERE session_id = ?");
                $stmt->bind_param("s", $this->session_id);
                $stmt->execute();
                $stmt->close();
            }
            
            $conn->close();
        } catch (Exception $e) {
            error_log("Cleanup error: " . $e->getMessage());
        }
    }
}

// ===============================
// 4. 修改后的ExcelComparisonTool类
// ===============================

class ExcelComparisonToolWithDatabaseCancel extends ExcelComparisonTool {
    
    public function compareDataWithDatabaseCancelCheck($task_id, int $batchSize = 500): array {
        $comparisonResults = [];
        
        // 创建索引查找数组
        $argosMap = [];
        foreach ($this->argosData as $argosRow) {
            $serialKey = strtolower($argosRow['serial#']);
            if (!isset($argosMap[$serialKey])) {
                $argosMap[$serialKey] = [];
            }
            $argosMap[$serialKey][] = $argosRow;
        }

        $snMap = [];
        foreach ($this->snData as $snRow) {
            $serialKey = strtolower($snRow['Serial number']);
            if (!isset($snMap[$serialKey])) {
                $snMap[$serialKey] = [];
            }
            $snMap[$serialKey][] = $snRow;
        }

        // 分批处理DCE数据
        $totalDce = count($this->dceData);
        for ($i = 0; $i < $totalDce; $i += $batchSize) {
            // 每批次前检查取消状态
            if (isTaskCancelled($task_id)) {
                return false; // 返回false表示被取消
            }
            
            $batch = array_slice($this->dceData, $i, $batchSize);
            $progress = 80 + (10 * $i / $totalDce); // 80-90%的进度用于DCE处理
            updateTaskStatus($task_id, 'processing', $progress, "处理DCE数据 " . ($i + count($batch)) . "/$totalDce");

            foreach ($batch as $dceRow) {
                $dceSerial = strtolower($dceRow['serial'] ?? '');
                $matchedArgosRows = $argosMap[$dceSerial] ?? [];

                if (empty($matchedArgosRows)) {
                    $comparisonResults[] = [
                        'hostname' => $dceRow['hostname'] ?? 'N/A',
                        'dce_useruid' => $dceRow['useruid'] ?? 'N/A',
                        'dce_sn' => $dceRow['serial'] ?? 'N/A',
                        'argos_owner' => 'N/A',
                        'argos_serial' => 'N/A',
                        'sn_serial' => 'N/A',
                        'dce_livedate' => $dceRow['livedate'] ?? 'N/A',
                        'dce_userwhen' => $dceRow['userwhen'] ?? 'N/A',
                        'argos_state' => 'N/A',
                        'sn_state' => 'N/A',
                        'sn_pending_collection' => 'N/A',
                        'dce_status' => 'N/A',
                        'compliance_status' => 'non-compliant',
                        'compliance_reason' => 'No matching ARGOS entry'
                    ];
                    continue;
                }

                foreach ($matchedArgosRows as $argosRow) {
                    $argosSerial = strtolower($argosRow['serial#'] ?? '');
                    $matchedSnRows = $snMap[$argosSerial] ?? [];

                    if (empty($matchedSnRows)) {
                        $comparisonResults[] = [
                            'hostname' => $dceRow['hostname'] ?? 'N/A',
                            'dce_useruid' => $dceRow['useruid'] ?? 'N/A',
                            'dce_sn' => $dceRow['serial'] ?? 'N/A',
                            'argos_owner' => $argosRow['owner'] ?? 'N/A',
                            'argos_serial' => $argosRow['serial#'] ?? 'N/A',
                            'sn_serial' => 'N/A',
                            'dce_livedate' => $dceRow['livedate'] ?? 'N/A',
                            'dce_userwhen' => $dceRow['userwhen'] ?? 'N/A',
                            'argos_state' => $argosRow['state'] ?? 'N/A',
                            'sn_state' => 'N/A',
                            'sn_pending_collection' => 'N/A',
                            'dce_status' => $this->checkDceStatus($dceRow, $argosRow),
                            'compliance_status' => 'non-compliant',
                            'compliance_reason' => 'No matching SN entry'
                        ];
                        continue;
                    }

                    foreach ($matchedSnRows as $snRow) {
                        $dceStatus = $this->checkDceStatus($dceRow, $argosRow);
                        $complianceResult = $this->checkCompliance($dceStatus, $argosRow, $snRow);

                        $comparisonResults[] = [
                            'hostname' => $dceRow['hostname'] ?? 'N/A',
                            'dce_useruid' => $dceRow['useruid'] ?? 'N/A',
                            'dce_sn' => $dceRow['serial'] ?? 'N/A',
                            'argos_owner' => $argosRow['owner'] ?? 'N/A',
                            'argos_serial' => $argosRow['serial#'] ?? 'N/A',
                            'sn_serial' => $snRow['Serial number'] ?? 'N/A',
                            'dce_livedate' => $dceRow['livedate'] ?? 'N/A',
                            'dce_userwhen' => $dceRow['userwhen'] ?? 'N/A',
                            'argos_state' => $argosRow['state'] ?? 'N/A',
                            'sn_state' => $snRow['State'] ?? 'N/A',
                            'sn_pending_collection' => $snRow['Pending collection [Hardware]'] ?? 'N/A',
                            'dce_status' => $dceStatus,
                            'compliance_status' => $complianceResult['status'],
                            'compliance_reason' => $complianceResult['reason']
                        ];
                    }
                }
            }

            // 释放内存
            unset($batch);
            if (function_exists('gc_collect_cycles')) {
                gc_collect_cycles();
            }
        }

        // 处理ARGOS和SN的单独记录（类似逻辑，都要加入取消检查）
        updateTaskStatus($task_id, 'processing', 90, "处理单独的ARGOS记录...");
        
        if (isTaskCancelled($task_id)) {
            return false;
        }
        
        // 这里添加处理ARGOS独立记录的逻辑...
        // 为简洁起见省略，但实现方式相同

        return $comparisonResults;
    }
}
?>
