<?php
// ===============================
// cancel_task.php - 数据库版本
// ===============================
?>

<?php
require_once 'your_database_functions.php'; // 包含你的数据库函数

if ($_POST['task_id']) {
    $task_id = $_POST['task_id'];
    
    if (cancelTask($task_id)) {
        echo "取消请求已发送";
    } else {
        echo "取消请求失败";
    }
}
?>

<?php
// ===============================
// get_task_progress.php - 数据库版本
// ===============================
?>

<?php
header('Content-Type: application/json');
require_once 'your_database_functions.php';

$task_id = $_GET['task_id'] ?? '';
if (empty($task_id)) {
    echo json_encode(['status' => 'error', 'message' => '缺少任务ID']);
    exit;
}

$task_status = getTaskStatus($task_id);

if ($task_status) {
    echo json_encode([
        'status' => $task_status['status'],
        'progress' => $task_status['progress'],
        'message' => $task_status['message'],
        'updated_at' => $task_status['updated_at']
    ]);
} else {
    echo json_encode([
        'status' => 'not_found', 
        'progress' => 0, 
        'message' => '任务未找到'
    ]);
}
?>

<?php
// ===============================
// get_final_session.php - 数据库版本
// ===============================
?>

<?php
require_once 'your_database_functions.php';

$task_id = $_GET['task_id'] ?? '';
if (empty($task_id)) {
    echo "错误：缺少任务ID";
    exit;
}

$task_status = getTaskStatus($task_id);

if ($task_status && $task_status['final_session_id']) {
    echo $task_status['final_session_id'];
    
    // 可选：清理已完成的任务记录
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("DELETE FROM task_status WHERE task_id = ?");
        $stmt->bind_param("s", $task_id);
        $stmt->execute();
        $stmt->close();
        $conn->close();
    } catch (Exception $e) {
        error_log("Error cleaning up task: " . $e->getMessage());
    }
} else {
    echo "错误：找不到会话ID";
}
?>

<?php
// ===============================
// async_processor_db.php - 数据库版本的异步处理器
// ===============================
?>

<?php
// 获取任务ID
$task_id = $argv[1] ?? '';
if (empty($task_id)) {
    die("缺少任务ID");
}

// 包含你的数据库函数和类
require_once 'your_database_functions.php'; // 替换为你的实际文件名

try {
    // 创建处理器并开始处理
    $processor = new DatabaseAsyncProcessor($task_id);
    $processor->process();
} catch (Exception $e) {
    updateTaskStatus($task_id, 'error', 0, '处理器启动失败: ' . $e->getMessage());
    error_log("Async processor error: " . $e->getMessage());
}
?>

<?php
// ===============================
// 修改你的主脚本 test11.php 的上传处理部分
// ===============================
?>

<?php
// 在你的 test11.php 中添加以下函数来替换原来的 handleFileUpload

function handleFileUploadAsyncDatabase() {
    // 检查文件是否已上传
    if (!isset($_FILES['dce_file']) || !isset($_FILES['argos_file']) || !isset($_FILES['sn_file'])) {
        throw new Exception("Please upload DCE, ARGOS, and SN files");
    }

    // 生成唯一会话ID和任务ID
    $session_id = uniqid('upload_', true);
    $task_id = uniqid('task_', true);

    // 确保表存在
    createDataTables();
    createTaskStatusTable();

    try {
        // 处理DCE文件
        $dceFile = $_FILES['dce_file']['tmp_name'];
        $dceData = [];
        if (($handle = fopen($dceFile, "r")) !== FALSE) {
            $headers = fgetcsv($handle);
            while (($row = fgetcsv($handle)) !== FALSE) {
                if (count($row) == count($headers)) {
                    $dceData[] = array_combine($headers, $row);
                }
            }
            fclose($handle);
        }

        // 存储DCE数据到数据库
        $dceFieldMapping = [
            'hostname' => 'hostname',
            'useruid' => 'useruid',
            'sn_number' => 'serial',
            'livedate' => 'livedate',
            'userwhen' => 'userwhen'
        ];
        storeCsvDataToDatabase($dceData, 'dce_data', $session_id, $dceFieldMapping);

        // 处理ARGOS文件
        $argosFile = $_FILES['argos_file']['tmp_name'];
        $argosData = [];
        if (($handle = fopen($argosFile, "r")) !== FALSE) {
            $headers = fgetcsv($handle);
            while (($row = fgetcsv($handle)) !== FALSE) {
                if (count($row) == count($headers)) {
                    $argosData[] = array_combine($headers, $row);
                }
            }
            fclose($handle);
        }

        // 存储ARGOS数据
        $argosFieldMapping = [
            'hostname' => 'Hostname',
            'owner' => 'Owner',
            'serial_number' => 'Serial #',
            'state' => 'State'
        ];
        storeCsvDataToDatabase($argosData, 'argos_data', $session_id, $argosFieldMapping);

        // 处理SN文件
        $snFile = $_FILES['sn_file']['tmp_name'];
        $snData = [];
        if (($handle = fopen($snFile, "r")) !== FALSE) {
            $headers = fgetcsv($handle);
            while (($row = fgetcsv($handle)) !== FALSE) {
                if (count($row) == count($headers)) {
                    $snData[] = array_combine($headers, $row);
                }
            }
            fclose($handle);
        }

        // 存储SN数据
        $snFieldMapping = [
            'serial_number' => 'Serial number',
            'State' => 'State',
            'pending_collection' => 'Pending collection [Hardware]'
        ];
        storeCsvDataToDatabase($snData, 'sn_data', $session_id, $snFieldMapping);

        // 创建任务记录
        createTask($task_id, $session_id);

        // 启动后台异步处理
        if (function_exists('shell_exec')) {
            $command = "php async_processor_db.php " . escapeshellarg($task_id) . " > /dev/null 2>&1 &";
            shell_exec($command);
        } else {
            throw new Exception("Cannot execute background processes. shell_exec function is not available.");
        }

        return $task_id;
    } catch (Exception $e) {
        throw new Exception("处理文件时出错: " . $e->getMessage());
    }
}

// 修改主执行逻辑
try {
    $comparisonResults = [];
    $nonCompliantResults = [];
    $sessionId = isset($_GET['session_id']) ? $_GET['session_id'] : null;
    $taskId = isset($_GET['task_id']) ? $_GET['task_id'] : null;

    // 清理旧数据
    cleanupOldResults(24);
    cleanupOldCsvData(24);
    cleanupOldTasks(24); // 新增：清理旧任务

    if ($taskId) {
        // 显示处理页面
        showProcessingPageDatabase($taskId);
        exit;
    } else if ($sessionId) {
        // 检索之前的处理结果
        $comparisonResults = getComparisonResults($sessionId);
        if (!$comparisonResults) {
            echo "<div style='color:red;margin:10px 0;'>会话已过期或无效。请重新上传文件。</div>";
            $comparisonResults = [];
        } else {
            $nonCompliantResults = array_filter($comparisonResults, function($result) {
                return $result['compliance_status'] === 'non-compliant';
            });
        }
    } else if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['dce_file'])) {
        // 处理新的文件上传 - 异步数据库模式
        $taskId = handleFileUploadAsyncDatabase();
        
        // 重定向到处理页面
        header("Location: " . $_SERVER['PHP_SELF'] . "?task_id=" . $taskId);
        exit;
    }
} catch (Exception $e) {
    die("上传错误: " . $e->getMessage());
}

// 清理旧任务的函数
function cleanupOldTasks($hoursOld = 24) {
    try {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("DELETE FROM task_status WHERE created_at < DATE_SUB(NOW(), INTERVAL ? HOUR)");
        $stmt->bind_param("i", $hoursOld);
        $stmt->execute();
        $stmt->close();
        $conn->close();
    } catch (Exception $e) {
        error_log("Database error during task cleanup: " . $e->getMessage());
    }
}

// 数据库版本的处理页面显示函数
function showProcessingPageDatabase($taskId) {
    ?>

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>正在处理文件...</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .progress-container {
            margin: 20px 0;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .progress-bar {
            width: 100%;
            height: 25px;
            background-color: #e0e0e0;
            border-radius: 15px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-fill {
            height: 100%;
            background-color: #4CAF50;
            transition: width 0.3s ease;
            border-radius: 15px;
        }
        .cancel-btn {
            background-color: #dc3545;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .cancel-btn:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }
        .status-message {
            margin: 10px 0;
            font-size: 14px;
        }
        .info-note {
            background-color: #d1ecf1;
            border: 1px solid #bee5eb;
            color: #0c5460;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <h2>正在处理您的文件...</h2>
    
    <div class="info-note">
        <strong>数据库异步处理模式：</strong> 您的文件已安全存储在数据库中，正在后台处理。
    </div>
    
    <div class="progress-container">
        <div id="statusMessage" class="status-message">准备开始处理...</div>
        <div class="progress-bar">
            <div id="progressFill" class="progress-fill" style="width: 0%"></div>
        </div>
        <div id="progressText">0%</div>
        <button id="cancelBtn" class="cancel-btn">取消处理</button>
    </div>
    
    <script>
    let taskId = '<?php echo $taskId; ?>';
    let cancelled = false;
    
    // 取消按钮事件
    document.getElementById('cancelBtn').onclick = function() {
        if (confirm('确定要取消处理吗？已存储的数据将被清理。')) {
            cancelled = true;
            this.disabled = true;
            this.textContent = '正在取消...';
            
            fetch('cancel_task.php', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: 'task_id=' + taskId
            }).then(response => response.text())
              .then(data => {
                  document.getElementById('statusMessage').innerHTML = '取消请求已发送，正在停止处理...';
              });
        }
    };
    
    // 检查进度
    function checkProgress() {
        if (cancelled) return;
        
        fetch('get_task_progress.php?task_id=' + taskId)
        .then(response => response.json())
        .then(data => {
            document.getElementById('statusMessage').innerHTML = data.message;
            document.getElementById('progressFill').style.width = data.progress + '%';
            document.getElementById('progressText').innerHTML = Math.round(data.progress) + '%';
            
            if (data.status === 'completed') {
                // 处理完成，获取最终会话ID
                fetch('get_final_session.php?task_id=' + taskId)
                .then(response => response.text())
                .then(sessionId => {
                    window.location.href = 'test11.php?session_id=' + session
```
